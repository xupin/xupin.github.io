<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/2951352e5bcbaf7ac77463667c5bbfa4</icon>
  <subtitle>Keep it simple, stupid</subtitle>
  <link href="http://xupin.im/atom.xml" rel="self"/>
  
  <link href="http://xupin.im/"/>
  <updated>2021-11-23T05:29:32.840Z</updated>
  <id>http://xupin.im/</id>
  
  <author>
    <name>Mark</name>
    <email>xupinbest@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记 - yield</title>
    <link href="http://xupin.im/2021/11/22/python-yield/"/>
    <id>http://xupin.im/2021/11/22/python-yield/</id>
    <published>2021-11-21T16:00:00.000Z</published>
    <updated>2021-11-23T05:29:32.840Z</updated>
    
    <content type="html"><![CDATA[<p>在程序中除了迭代器还有生成器均是可迭代对象，迭代器是通过移动游标来遍历数据，那生成器呢</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器创建方式（python）</p><ul><li>(表达式)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">generator = (i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) // 这里有区别于 [i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">print(generator)  <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x10c312870&gt;</span></span><br><span class="line">print(next(generator))  <span class="comment"># 1</span></span><br><span class="line">print(next(generator))  <span class="comment"># 2</span></span><br><span class="line">print(next(generator))  <span class="comment"># 3</span></span><br><span class="line">print(next(generator))  <span class="comment"># raise StopIteration</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>yield<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getGenerator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]: </span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br><span class="line"></span><br><span class="line">generator = getGenerator()</span><br><span class="line">print(generator)  <span class="comment"># &lt;generator object getGenerator at 0x10c3128c0&gt;</span></span><br><span class="line">print(next(generator))  <span class="comment"># 1</span></span><br><span class="line">print(next(generator))  <span class="comment"># 2</span></span><br><span class="line">print(next(generator))  <span class="comment"># 3</span></span><br><span class="line">print(next(generator))  <span class="comment"># done &amp; raise StopIteration</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当<code>yield</code>出现在函数中（yield只能定义在函数中），那么调用时不会直接运行函数而是返回一个生成器对象，生成器也是一个特殊的迭代器（实现了迭代器协议的对象）。</p><ul><li>第一次调用<code>next()</code>函数，遇见<code>yield</code>停下返回yield后面的内容</li><li>再次调用<code>next()</code>函数，从上次yield语句处恢复，如果还存在<code>yield</code>则正常执行，否则函数体执行完毕抛出<code>StopIteration</code>异常<blockquote><p>通俗的来说：yield相当于return，但yield会记住这个返回位置，再次执行会从这个位置开始。</p></blockquote></li></ul><p>生成器中<code>send()</code>是和<code>next()</code>一样能让生成器恢复执行的函数，不同的是<code>send(arg)</code>函数可以传递参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getGenerator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">        print(<span class="string">"before: "</span>, i)</span><br><span class="line">        t = <span class="keyword">yield</span> i</span><br><span class="line">        print(<span class="string">"after: "</span>, i, t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">generator = getGenerator()</span><br><span class="line">print(generator)  <span class="comment"># &lt;generator object getGenerator at 0x10c3128c0&gt;</span></span><br><span class="line">generator.send(<span class="literal">None</span>)  <span class="comment"># before:  1</span></span><br><span class="line">next(generator)  <span class="comment"># after:  1 None &amp; before:  2</span></span><br><span class="line">generator.send(<span class="number">22</span>)  <span class="comment"># after:  2 22 &amp; before:  3</span></span><br><span class="line">generator.send(<span class="number">33</span>)  <span class="comment"># after:  3 33 &amp; raise StopIteration</span></span><br></pre></td></tr></table></figure></p><p>注意第一次调用生成器不可以直接传递非None参数，因为yield还未准备好（无返回值），可以<code>generator.send(None)</code>或<code>next(generator)</code>。具体可以参考python源码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const char *msg = <span class="string">"can't send non-None value to a "</span></span><br><span class="line">                              <span class="string">"just-started generator"</span>;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/python/cpython/blob/3.9/Objects/genobject.c#L181" target="_blank" rel="noopener">https://github.com/python/cpython/blob/3.9/Objects/genobject.c#L181</a></p><h3 id="迭代协议"><a href="#迭代协议" class="headerlink" title="迭代协议"></a>迭代协议</h3><p>什么是可迭代协议？</p><blockquote><p>当处理迭代时首先调用<code>可迭代对象.__iter__()</code>，返回迭代器。然后通过<code>迭代器.__next__()</code>获取迭代器的元素，直至抛出<code>StopIteration</code>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomGenerator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"look at me"</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index &lt; len(self.data):</span><br><span class="line">            val = self.data[self.index]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">generator = CustomGenerator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(generator)  <span class="comment"># &lt;__main__.CustomGenerator object at 0x1047161f0&gt;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> generator:</span><br><span class="line">    print(x)</span><br><span class="line"><span class="comment"># look at me</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">print(next(generator))  <span class="comment"># raise StopIteration</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在程序中除了迭代器还有生成器均是可迭代对象，迭代器是通过移动游标来遍历数据，那生成器呢&lt;/p&gt;
&lt;h3 id=&quot;生成器&quot;&gt;&lt;a href=&quot;#生成器&quot; class=&quot;headerlink&quot; title=&quot;生成器&quot;&gt;&lt;/a&gt;生成器&lt;/h3&gt;&lt;p&gt;生成器创建方式（python）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(表达式)&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;generator = (i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) // 这里有区别于 [i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(generator)  &lt;span class=&quot;comment&quot;&gt;# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x10c312870&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(next(generator))  &lt;span class=&quot;comment&quot;&gt;# 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(next(generator))  &lt;span class=&quot;comment&quot;&gt;# 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(next(generator))  &lt;span class=&quot;comment&quot;&gt;# 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(next(generator))  &lt;span class=&quot;comment&quot;&gt;# raise StopIteration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="python" scheme="http://xupin.im/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - cursor</title>
    <link href="http://xupin.im/2021/11/18/mysql-cursor/"/>
    <id>http://xupin.im/2021/11/18/mysql-cursor/</id>
    <published>2021-11-17T16:00:00.000Z</published>
    <updated>2021-11-22T09:48:01.840Z</updated>
    
    <content type="html"><![CDATA[<p>游标（cursor）是可以从数据库检索结果集中每次提取一行记录的机制，游标的作用就是对结果集进行遍历，方便对记录进行操作。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>三种特性：</p><ul><li>只读<blockquote><p>不能更新它</p></blockquote></li><li>非滚动<blockquote><p>根据SQL语句确定顺序，不能向后获取记录和跳过记录</p></blockquote></li><li>敏感/不敏感<blockquote><p>敏感游标指向的是数据表，不敏感游标指向的则是临时数据表。（Mysql使用的是敏感游标）</p></blockquote></li></ul><h3 id="声明游标"><a href="#声明游标" class="headerlink" title="声明游标"></a>声明游标</h3><p>游标使用的变量必须在声明游标之前声明</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// Mysql</span><br><span class="line">// 不同于其他数据库，Mysql的游标必须声明在存储过程/函数中。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> cur_func()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> &#123;...VARs&#125; // e.g. <span class="keyword">declare</span> email <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">declare</span> &#123;CUR_NAME&#125; <span class="keyword">cursor</span> <span class="keyword">for</span> &#123;<span class="keyword">STATEMENT</span>&#125;;</span><br><span class="line">    open &#123;CUR_NAME&#125;;</span><br><span class="line">    fetch &#123;CUR_NAME&#125; into &#123;...VARs&#125; // e.g. fetch cur1 into email,name // 取出1行记录 &amp; 把值赋给变量email、name</span><br><span class="line">    close &#123;CUR_NAME&#125;;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">// PgSql</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> &#123;CUR_NAME&#125; <span class="keyword">cursor</span> <span class="keyword">for</span> &#123;<span class="keyword">STATEMENT</span>&#125;;</span><br><span class="line">    open &#123;CUR_NAME&#125;;</span><br><span class="line">    fetch &#123;STATEMENT&#125; from &#123;CUR_NAME&#125; // e.g. fetch forward 10 from cur1 取出10行记录</span><br><span class="line">    close &#123;CUR_NAME&#125;;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>游标有着类似指针的作用，它是遍历容器的一套接口（迭代器），简单实现（golang）:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomArray []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">struct</span> &#123;</span><br><span class="line">data  CustomArray</span><br><span class="line">index <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cusArr := CustomArray&#123;<span class="string">"1_1"</span>, <span class="number">22</span>, <span class="number">3.3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> iter := cusArr.iterator(); iter.hasNext(); &#123;</span><br><span class="line">fmt.Println(iter.key(), iter.next())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(arr CustomArray)</span> <span class="title">iterator</span><span class="params">()</span> *<span class="title">Iterator</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Iterator&#123;</span><br><span class="line">data:  arr,</span><br><span class="line">index: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游标</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iter *Iterator)</span> <span class="title">key</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> iter.index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一个元素是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iter *Iterator)</span> <span class="title">hasNext</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> iter.index &lt; <span class="built_in">len</span>(iter.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出数据&amp;移动游标</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iter *Iterator)</span> <span class="title">next</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">val := iter.data[iter.index]</span><br><span class="line">iter.index += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的说：游标返回一个数据集合迭代器，当你取一行记录同时游标指向下一个元素。</p><p>举例使用游标的DB库，以下：<br><a href="https://github.com/PyMySQL/PyMySQL/blob/46d17402af/pymysql/cursors.py#L278" target="_blank" rel="noopener">https://github.com/PyMySQL/PyMySQL/blob/46d17402af/pymysql/cursors.py#L278</a><br><a href="https://github.com/golang/go/blob/master/src/database/sql/sql.go#L2983" target="_blank" rel="noopener">https://github.com/golang/go/blob/master/src/database/sql/sql.go#L2983</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;游标（cursor）是可以从数据库检索结果集中每次提取一行记录的机制，游标的作用就是对结果集进行遍历，方便对记录进行操作。&lt;/p&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;p&gt;三种特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读&lt;blockquote&gt;
&lt;p&gt;不能更新它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;非滚动&lt;blockquote&gt;
&lt;p&gt;根据SQL语句确定顺序，不能向后获取记录和跳过记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;敏感/不敏感&lt;blockquote&gt;
&lt;p&gt;敏感游标指向的是数据表，不敏感游标指向的则是临时数据表。（Mysql使用的是敏感游标）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;声明游标&quot;&gt;&lt;a href=&quot;#声明游标&quot; class=&quot;headerlink&quot; title=&quot;声明游标&quot;&gt;&lt;/a&gt;声明游标&lt;/h3&gt;&lt;p&gt;游标使用的变量必须在声明游标之前声明&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - InnoDB并发死锁问题</title>
    <link href="http://xupin.im/2021/11/15/mysql-deadlock/"/>
    <id>http://xupin.im/2021/11/15/mysql-deadlock/</id>
    <published>2021-11-14T16:00:00.000Z</published>
    <updated>2021-11-18T07:14:52.953Z</updated>
    
    <content type="html"><![CDATA[<p>项目中某个定时任务执行过程中出现死锁问题，具体错误如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error 1213: Deadlock found when trying to get lock; try restarting transaction</span><br></pre></td></tr></table></figure></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>检查一下表引擎 &amp; 事务隔离级别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%storage_engine%'</span>;</span><br><span class="line">+---------------------------------+-----------+</span><br><span class="line">| Variable_name                   | Value     |</span><br><span class="line">+---------------------------------+-----------+</span><br><span class="line">| default_storage_engine          | InnoDB    |</span><br><span class="line">| default_tmp_storage_engine      | InnoDB    |</span><br><span class="line">| disabled_storage_engines        |           |</span><br><span class="line">| internal_tmp_mem_storage_engine | TempTable |</span><br><span class="line">+---------------------------------+-----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@global.tx_isolation;</span><br><span class="line">ERROR 1193 (HY000): Unknown system variable <span class="string">'tx_isolation'</span> // Mysql8.0以后取消了该变量</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>默认使用的引擎是InnoDB，Insert、Update、Delete操作会触发排它锁（X锁）即行锁，所以怀疑是不是触发了共享锁（S锁）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show engine innodb status;</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line">2021-11-15 02:42:28 0x2b1f5b160700 INNODB MONITOR OUTPUT</span><br><span class="line">=====================================</span><br><span class="line">Per second averages calculated from the last 59 seconds</span><br><span class="line">...</span><br><span class="line">------------------------</span><br><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">2021-11-12 14:21:02 0x2b204ca06700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 3805455, ACTIVE 0 sec inserting</span><br><span class="line">mysql tables <span class="keyword">in</span> use 1, locked 1</span><br><span class="line">LOCK WAIT 4 lock struct(s), heap size 1136, 3 row lock(s), undo <span class="built_in">log</span> entries 1</span><br><span class="line">MySQL thread id 875327, OS thread handle 47411963238144, query id 20765167 10.85.62.212 dsc update</span><br><span class="line">INSERT INTO `user_tag_distributes` (`created_at`,`updated_at`,`deleted_at`,`app_id`,`tag_name`,`tag_value`,`account_num`) VALUES (<span class="string">'2021-11-12 14:21:02.386'</span>,<span class="string">'2021-11-12 14:21:02.386'</span>,NULL,<span class="string">'im'</span>,<span class="string">'churn_model_v2'</span>,<span class="string">'0.70709264'</span>,1)</span><br><span class="line"></span><br><span class="line">*** (1) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 334 page no 341 n bits 160 index PRIMARY of table `api`.`user_tag_distributes` trx id 3805455 lock_mode X locks rec but not gap</span><br><span class="line">Record lock, heap no 89 PHYSICAL RECORD: n_fields 11; compact format; info bits 0</span><br><span class="line"> 0: len 8; hex 000000000002515d; asc       Q];;</span><br><span class="line"> 1: len 6; hex 0000003a110f; asc    :  ;;</span><br><span class="line"> 2: len 7; hex 81000001960110; asc        ;;</span><br><span class="line"> 3: len 7; hex 99ab18e5420f14; asc     B  ;;</span><br><span class="line"> 4: len 7; hex 99ab18e5420f14; asc     B  ;;</span><br><span class="line"> 5: SQL NULL;</span><br><span class="line"> 6: SQL NULL;</span><br><span class="line"> 7: len 2; hex 696d; asc im;;</span><br><span class="line"> 8: len 14; hex 636875726e5f6d6f64656c5f7632; asc churn_model_v2;;</span><br><span class="line"> 9: len 10; hex 302e3730373039323634; asc 0.70709264;;</span><br><span class="line"> 10: len 3; hex 800001; asc    ;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 334 page no 203 n bits 392 index tag of table `api`.`user_tag_distributes` trx id 3805455 lock mode S waiting</span><br><span class="line">Record lock, heap no 88 PHYSICAL RECORD: n_fields 3; compact format; info bits 32</span><br><span class="line"> 0: len 14; hex 636875726e5f6d6f64656c5f7632; asc churn_model_v2;;</span><br><span class="line"> 1: len 9; hex 302e37303730393735; asc 0.7070975;;</span><br><span class="line"> 2: len 8; hex 0000000000022d5f; asc       -_;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 3805441, ACTIVE 0 sec fetching rows</span><br><span class="line">mysql tables <span class="keyword">in</span> use 1, locked 1</span><br><span class="line">LOCK WAIT 89 lock struct(s), heap size 24784, 17767 row lock(s), undo <span class="built_in">log</span> entries 10247</span><br><span class="line">MySQL thread id 875354, OS thread handle 47415383693056, query id 20765093 10.85.62.212 dsc updating</span><br><span class="line">DELETE FROM `user_tag_distributes` WHERE app_id = <span class="string">'im'</span> and tag_name = <span class="string">'churn_model_v2'</span></span><br><span class="line"></span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 334 page no 203 n bits 392 index tag of table `api`.`user_tag_distributes` trx id 3805441 lock_mode X locks rec but not gap</span><br><span class="line">Record lock, heap no 88 PHYSICAL RECORD: n_fields 3; compact format; info bits 32</span><br><span class="line"> 0: len 14; hex 636875726e5f6d6f64656c5f7632; asc churn_model_v2;;</span><br><span class="line"> 1: len 9; hex 302e37303730393735; asc 0.7070975;;</span><br><span class="line"> 2: len 8; hex 0000000000022d5f; asc       -_;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 334 page no 341 n bits 160 index PRIMARY of table `api`.`user_tag_distributes` trx id 3805441 lock_mode X waiting</span><br><span class="line">Record lock, heap no 89 PHYSICAL RECORD: n_fields 11; compact format; info bits 0</span><br><span class="line"> 0: len 8; hex 000000000002515d; asc       Q];;</span><br><span class="line"> 1: len 6; hex 0000003a110f; asc    :  ;;</span><br><span class="line"> 2: len 7; hex 81000001960110; asc        ;;</span><br><span class="line"> 3: len 7; hex 99ab18e5420f14; asc     B  ;;</span><br><span class="line"> 4: len 7; hex 99ab18e5420f14; asc     B  ;;</span><br><span class="line"> 5: SQL NULL;</span><br><span class="line"> 6: SQL NULL;</span><br><span class="line"> 7: len 2; hex 696d; asc im;;</span><br><span class="line"> 8: len 14; hex 636875726e5f6d6f64656c5f7632; asc churn_model_v2;;</span><br><span class="line"> 9: len 10; hex 302e3730373039323634; asc 0.70709264;;</span><br><span class="line"> 10: len 3; hex 800001; asc    ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (1)</span><br><span class="line">------------</span><br><span class="line">TRANSACTIONS</span><br><span class="line">------------</span><br><span class="line">Trx id counter 3945122</span><br><span class="line">Purge <span class="keyword">done</span> <span class="keyword">for</span> trx<span class="string">'s n:o &lt; 3945122 undo n:o &lt; 0 state: running but idle</span></span><br><span class="line"><span class="string">History list length 3</span></span><br><span class="line"><span class="string">LIST OF TRANSACTIONS FOR EACH SESSION:</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640459544, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640456152, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640455304, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640457000, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640448520, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640447672, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640452760, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640458696, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640446824, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640453608, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640457848, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640451912, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640451064, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640454456, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640450216, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640449368, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640445976, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">---TRANSACTION 328886640445128, not started</span></span><br><span class="line"><span class="string">0 lock struct(s), heap size 1136, 0 row lock(s)</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">----------------------------</span></span><br><span class="line"><span class="string">END OF INNODB MONITOR OUTPUT</span></span><br><span class="line"><span class="string">============================</span></span><br></pre></td></tr></table></figure><p>通过以上信息确认是因为[事务1]Insert &amp; [事务2]Delete互相等待对方事务释放锁的问题造成死锁，最后[事务1]进行回滚。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>review代码梳理一下业务逻辑，场景应该如下：</p><table><thead><tr><th>trx1</th><th>trx2</th></tr></thead><tbody><tr><td></td><td>BEGIN</td></tr><tr><td>BEGIN</td><td>DELETE FROM <code>user_tag_distributes</code> WHERE app_id = ‘im’ and tag_name = ‘churn_model_v2’</td></tr><tr><td>DELETE FROM <code>user_tag_distributes</code> WHERE app_id = ‘im’ and tag_name = ‘churn_model_v2’</td><td></td></tr><tr><td>INSERT INTO <code>user_tag_distributes</code> (<code>created_at</code>,<code>updated_at</code>,<code>deleted_at</code>,<code>app_id</code>,<code>tag_name</code>,<code>tag_value</code>,<code>account_num</code>) VALUES (‘2021-11-12 14:21:02.386’,’2021-11-12 14:21:02.386’,NULL,’im’,’churn_model_v2’,’0.70709264’,1)</td><td></td></tr><tr><td>ERROR 1213 (40001): Deadlock found when trying to get lock</td><td></td></tr><tr><td>ROLLBACK</td><td>…</td></tr><tr><td></td><td>COMMIT</td></tr></tbody></table><p>可以看出[事务1]进行Insert操作时发现[事务2]进行Delete操作且已申请X锁，[事务1]想要获取S锁则需要[事务2]提交，所以[事务1]、[事务2]在相互等待对方提交事务（释放锁）。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>目前想到的几种措施：</p><ul><li>尽量避免在并发程序中Delete &amp; Insert操作无缝执行</li><li>并发程序采用分布式锁控制</li><li>程序不允许并发执行</li></ul><p><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-standard-monitor.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/innodb-standard-monitor.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目中某个定时任务执行过程中出现死锁问题，具体错误如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error 1213: Deadlock found when trying to get lock; try restarting transaction&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;p&gt;检查一下表引擎 &amp;amp; 事务隔离级别&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &lt;span class=&quot;string&quot;&gt;&#39;%storage_engine%&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------------------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name                   | Value     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------------------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| default_storage_engine          | InnoDB    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| default_tmp_storage_engine      | InnoDB    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| disabled_storage_engines        |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| internal_tmp_mem_storage_engine | TempTable |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------------------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 rows &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; select @@global.tx_isolation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR 1193 (HY000): Unknown system variable &lt;span class=&quot;string&quot;&gt;&#39;tx_isolation&#39;&lt;/span&gt; // Mysql8.0以后取消了该变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; select @@transaction_isolation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| @@transaction_isolation |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| REPEATABLE-READ         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 数据迁移</title>
    <link href="http://xupin.im/2021/11/12/mysql-migrate/"/>
    <id>http://xupin.im/2021/11/12/mysql-migrate/</id>
    <published>2021-11-11T16:00:00.000Z</published>
    <updated>2021-11-15T07:28:43.593Z</updated>
    
    <content type="html"><![CDATA[<p>之前项目数据表有分表设计，现在因为业务量增长数据表数据量膨胀数倍导致单表性能不理想 … 所以希望在不影响用户使用的情况下扩展数据表（迁移）</p><h3 id="数据迁移方案"><a href="#数据迁移方案" class="headerlink" title="数据迁移方案"></a>数据迁移方案</h3><p>基本分为<code>热迁移</code>和<code>冷迁移</code>两种方式</p><ul><li>冷迁移</li></ul><p>通俗的来说就是停机迁移，比如某些游戏合服维护等</p><blockquote><p>优点: 操作可靠性高、数据一致性有保证、数据回滚方便</p><p>缺点: 用户体验差</p></blockquote><a id="more"></a><p><img src="/assets/migrate/cold-migrate.jpg" width="400" height="400"></p><ul><li>热迁移</li></ul><p>在不停机的情况下把数据表迁移，新旧表双写</p><blockquote><p>优点: 用户无感知</p><p>缺点: 容易丢失数据、数据一致性不好保证</p></blockquote><p><img src="/assets/migrate/hot-migrate.jpg" width="400" height="400"></p><p>这种热迁移方式是不依赖第三方服务，纯靠DB完成迁移，极端场景下可靠性不确定。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前项目数据表有分表设计，现在因为业务量增长数据表数据量膨胀数倍导致单表性能不理想 … 所以希望在不影响用户使用的情况下扩展数据表（迁移）&lt;/p&gt;
&lt;h3 id=&quot;数据迁移方案&quot;&gt;&lt;a href=&quot;#数据迁移方案&quot; class=&quot;headerlink&quot; title=&quot;数据迁移方案&quot;&gt;&lt;/a&gt;数据迁移方案&lt;/h3&gt;&lt;p&gt;基本分为&lt;code&gt;热迁移&lt;/code&gt;和&lt;code&gt;冷迁移&lt;/code&gt;两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷迁移&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通俗的来说就是停机迁移，比如某些游戏合服维护等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优点: 操作可靠性高、数据一致性有保证、数据回滚方便&lt;/p&gt;
&lt;p&gt;缺点: 用户体验差&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Git小知识 - depth</title>
    <link href="http://xupin.im/2021/11/01/git-depth/"/>
    <id>http://xupin.im/2021/11/01/git-depth/</id>
    <published>2021-10-31T16:00:00.000Z</published>
    <updated>2021-11-18T07:22:02.148Z</updated>
    
    <content type="html"><![CDATA[<p>有时候git项目比较大，git clone会因为各种原因中断，但是Git并不会断点续“传”再次clone又是重新来过,类似这种问题…让人很是苦恼<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ error: RPC failed; HTTP 504 curl 22 The requested URL returned error: 504 Gateway Time-out</span><br><span class="line">$ ...</span><br><span class="line">$ error: RPC failed; curl 18 transfer closed with outstanding <span class="built_in">read</span> data remaining</span><br></pre></td></tr></table></figure></p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><ul><li><p>git配置流</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.lowSpeedLimit 0 // 最小速度</span><br><span class="line">$ git config --global http.lowSpeedTime 999999 // 最大速度</span><br><span class="line">$ git config --global http.postBuffer 524288000 // 文件大小</span><br><span class="line">$ git config --global compression 0 // 关闭压缩</span><br></pre></td></tr></table></figure></li><li><p>分块拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth=1 &#123;repo&#125; // 拉取最新的代码（最后一次commit）</span><br></pre></td></tr></table></figure></li></ul><p>但这样会带来其他的小问题，就是拉下来的代码默认分支既不是master也不是其他分支 … 需要拉取完整的项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --unshallow // 拉取深层代码</span><br><span class="line">$ git config remote.origin.fetch <span class="string">"+refs/heads/*:refs/remotes/origin/*"</span> // 修正remote关系（修改之前: <span class="string">"fetch = +refs/heads/master:refs/remotes/origin/master"</span>）</span><br><span class="line">$ git fetch -pv // 拉取所有分支</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候git项目比较大，git clone会因为各种原因中断，但是Git并不会断点续“传”再次clone又是重新来过,类似这种问题…让人很是苦恼&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="git" scheme="http://xupin.im/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 控制反转/依赖注入</title>
    <link href="http://xupin.im/2020/10/18/design-ioc-di/"/>
    <id>http://xupin.im/2020/10/18/design-ioc-di/</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2021-11-18T07:21:26.248Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel框架中控制反转和依赖注入功能是怎么实现的？<br>其实控制反转和依赖注入是一种设计思想，它最早源于Java Spring框架设计中的机制，所以身边如果有做Java开发的小伙伴~简单聊聊就能明白许多。</p><h3 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1.依赖注入"></a>1.依赖注入</h3><p>依赖注入（Dependency Injection），通俗的解释是当我们构建对象时需要的参数，只要不是手动创建而是以实例对象的形式注入都可以称为依赖注入。</p><p>举个例子，一个小游戏中玩家可以创建不同的职业。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 职业接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取职业名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dh</span> <span class="keyword">implements</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 职业名</span></span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">'猎魔人'</span>;</span><br><span class="line">    <span class="comment">// 攻击成长</span></span><br><span class="line">    <span class="keyword">protected</span> $attack;</span><br><span class="line">    <span class="comment">// 速度成长</span></span><br><span class="line">    <span class="keyword">protected</span> $speed;</span><br><span class="line">    <span class="comment">// 气血成长</span></span><br><span class="line">    <span class="keyword">protected</span> $hp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($attack,$speed,$hp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;attack = $attack;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;speed = $speed;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hp = $hp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 玩家类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 职业</span></span><br><span class="line">    <span class="keyword">protected</span> $role;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;role = $role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 猎魔人</span></span><br><span class="line">$dh = <span class="keyword">new</span> Dh(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 玩家1-&gt;猎魔人</span></span><br><span class="line">$player1 = <span class="keyword">new</span> Player($dh);</span><br></pre></td></tr></table></figure><a id="more"></a><p>以上是创建玩家角色的逻辑，创建角色<code>“player1”</code>时选择角色<code>“dh”</code>，那么这种方式其实就是依赖注入。</p><h3 id="2-控制反转（Ioc）"><a href="#2-控制反转（Ioc）" class="headerlink" title="2.控制反转（Ioc）"></a>2.控制反转（Ioc）</h3><p>控制反转（Inversion of Control），从字面意思来理解就是把控制权反转，那么究竟怎么反转呢？</p><p>之前创建玩家角色的逻辑，通过程序可以看出所有依赖对象都是程序主动去创建（职业对象，玩家对象）。那么如果我们想把所有需要的参数都提前准备好，怎么优化？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $binds;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> $instances;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($concrete <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binds[$abstract] = $concrete;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;instances[$abstract] = $concrete;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        array_unshift($parameters, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;binds[$abstract], $parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$container = <span class="keyword">new</span> Container();</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">'player'</span>, <span class="function"><span class="keyword">function</span><span class="params">($container, $role)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Player($container-&gt;make($role));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">'dh'</span>, <span class="function"><span class="keyword">function</span><span class="params">($container)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dh(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 玩家1-&gt;猎魔人</span></span><br><span class="line">$player1 = $container-&gt;make(<span class="string">'player'</span>, [<span class="string">'dh'</span>]);</span><br></pre></td></tr></table></figure><p>加入了一个名叫<code>“Container”</code>的类，里面存放提前设计好的对象，当程序需要某些依赖对象时<code>“Container”</code>自动帮你去寻找执行。这其实就是<br>Ioc设计思想中遵循“Don’t call us, we’ll call you”的原则，不需要程序去创建依赖，而是主动去帮程序寻找相应依赖。这也就是所说的控制反转，从狭义上讲依赖注入其实算是控制反转的一种实现。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>可能很多小伙伴会觉得控制反转的思想和工厂模式很相像，它们是不是就是同一个东西呢？有兴趣的小伙伴可以去看看<a href="https://stackoverflow.com/questions/557742/dependency-injection-vs-factory-pattern" target="_blank" rel="noopener">Dependency Injection vs Factory Pattern</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Laravel框架中控制反转和依赖注入功能是怎么实现的？&lt;br&gt;其实控制反转和依赖注入是一种设计思想，它最早源于Java Spring框架设计中的机制，所以身边如果有做Java开发的小伙伴~简单聊聊就能明白许多。&lt;/p&gt;
&lt;h3 id=&quot;1-依赖注入&quot;&gt;&lt;a href=&quot;#1-依赖注入&quot; class=&quot;headerlink&quot; title=&quot;1.依赖注入&quot;&gt;&lt;/a&gt;1.依赖注入&lt;/h3&gt;&lt;p&gt;依赖注入（Dependency Injection），通俗的解释是当我们构建对象时需要的参数，只要不是手动创建而是以实例对象的形式注入都可以称为依赖注入。&lt;/p&gt;
&lt;p&gt;举个例子，一个小游戏中玩家可以创建不同的职业。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 职业接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Role&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取职业名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dh&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Role&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 职业名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $name = &lt;span class=&quot;string&quot;&gt;&#39;猎魔人&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 攻击成长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $attack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 速度成长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 气血成长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $hp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($attack,$speed,$hp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;attack = $attack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;speed = $speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;hp = $hp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 玩家类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Player&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 职业&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $role;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($role)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;role = $role;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 猎魔人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$dh = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dh(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 玩家1-&amp;gt;猎魔人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$player1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Player($dh);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="design" scheme="http://xupin.im/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 聚簇索引和回表查询的关系</title>
    <link href="http://xupin.im/2020/08/12/mysql-clustered-index/"/>
    <id>http://xupin.im/2020/08/12/mysql-clustered-index/</id>
    <published>2020-08-11T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.609Z</updated>
    
    <content type="html"><![CDATA[<p>之前简单了解过Mysql的索引，今天来学习一下Mysql（InnoDB）的聚簇索引以及SQL为什么会产生回表查询？</p><h3 id="1-什么是回表查询？"><a href="#1-什么是回表查询？" class="headerlink" title="1. 什么是回表查询？"></a>1. 什么是回表查询？</h3><p>都知道Mysql存储的数据结构是B+Tree，所以当查询数据的时候能最快找到叶子节点的检索方式时是最快的。比如：主键直接定位行记录，而有些查询需要先检索索引树找到叶子节点的主键值，再通过主键值定位行记录这种扫描2次索引树的方式就叫做回表查询。</p><p>如何确定SQL语句会不会造成回表查询？如下表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user`</span> <span class="built_in">varchar</span>(<span class="number">125</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`user`</span>(<span class="string">`user`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">INDEX</span> <span class="string">`name`</span>(<span class="string">`name`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br></pre></td></tr></table></figure></p><p>2种查询方式：</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未回表查询</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'test1'</span>;</span><br><span class="line">+<span class="comment">------+-------------+-------+------+---------------+------+---------+-------+------+--------------------------+</span></span><br><span class="line">| id   | select_type | table | type | possible_keys | key  | key_len | ref   | rows | Extra                    |</span><br><span class="line">+<span class="comment">------+-------------+-------+------+---------------+------+---------+-------+------+--------------------------+</span></span><br><span class="line">|    1 | SIMPLE      | users | ref  | name          | name | 202     | const |    1 | Using where; Using index |</span><br><span class="line">+<span class="comment">------+-------------+-------+------+---------------+------+---------+-------+------+--------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回表查询</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">user</span>,<span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'test1'</span>;</span><br><span class="line">+<span class="comment">------+-------------+-------+------+---------------+------+---------+-------+------+-----------------------+</span></span><br><span class="line">| id   | select_type | table | type | possible_keys | key  | key_len | ref   | rows | Extra                 |</span><br><span class="line">+<span class="comment">------+-------------+-------+------+---------------+------+---------+-------+------+-----------------------+</span></span><br><span class="line">|    1 | SIMPLE      | users | ref  | name          | name | 202     | const |    1 | Using index condition |</span><br><span class="line">+<span class="comment">------+-------------+-------+------+---------------+------+---------+-------+------+-----------------------+</span></span><br></pre></td></tr></table></figure><p>注意看<code>Extra</code>字段，当值为<code>Using index condition</code>时表示该SQL需要回表查询，那以上两条SQL到底有什么不同呢？</p><ol><li><p><font color="gray">SQL1</font>命中<code>name</code>索引并且在索引树的叶子节点找到主键<code>id</code>，满足了查询需求所以不需要回表查询其他字段。</p></li><li><p><font color="gray">SQL2</font>同样是命中<code>name</code>索引并且在索引树叶子节点找到主键<code>id</code>，但还有一个<code>user</code>字段没有得到，所以需要拿着主键<code>id</code>去索引树查询<code>user</code>字段。</p></li></ol><p>以上就是是否回表查询的区别，回表查询会额外产生一次查询的开销，故此效率较低。不过回表查询和聚簇索引又有什么关联呢？为什么回表查询需要遍历2次索引树呢？</p><h3 id="2-聚簇索引"><a href="#2-聚簇索引" class="headerlink" title="2. 聚簇索引"></a>2. 聚簇索引</h3><p>InnoDB的索引类型之前有说过，多数使用B+Tree做索引但在实现上又区分为：<code>聚簇索引</code>和<code>辅助索引</code>。</p><ul><li>聚簇索引（Clustered Index）</li></ul><blockquote><p>聚簇索引的叶子节点存储行记录，InnoDB有且只有一个聚簇索引。聚簇索引的每一个叶子节点都有一个指向相邻叶子节点的指针，所以面对Range查询聚簇索引效率很高。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InnoDB默认主键是聚簇索引，如果没有定义主键则第一个Not Null &amp; Unique索引列为聚簇索引。如果以上条件都不满足，则会生成一个6字节的隐式自增长主键`row-id`。</span><br></pre></td></tr></table></figure><p>（<font color="yellow">这也是为什么InnoDB引擎下要求数据表尽可能都要创建主键的原因</font>。）</p><ul><li>辅助索引（Secondary Index）</li></ul><blockquote><p>辅助索引的叶子节点存储主键值（聚簇索引）。</p></blockquote><p>了解了索引树的结构，其实也就明白了为什么明明命中了索引却还会产生回表查询需要扫描2次索引树，即：先扫描辅助索引树拿到主键值，再扫描聚簇索引树获取行记录。</p><h3 id="3-如何避免回表查询？"><a href="#3-如何避免回表查询？" class="headerlink" title="3. 如何避免回表查询？"></a>3. 如何避免回表查询？</h3><p>避免回表查询这里有个概念：覆盖索引（Covering index），Mysql官方虽然没有明确定义<code>覆盖索引</code>但是有同样的概念出现。</p><blockquote><p>查询的字段尽可能在一棵索引树都能获取到，避免回表。</p></blockquote><p>（概念出处：<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain-extra-information" target="_blank" rel="noopener">Using index</a>）</p><p>具体怎么操作呢？直接上SQL。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> <span class="keyword">DROP</span> <span class="keyword">INDEX</span> <span class="string">`name`</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> <span class="string">`user_name`</span> ( <span class="string">`user`</span>, <span class="string">`name`</span> );</span><br></pre></td></tr></table></figure></p><p>创建<code>user</code>、<code>name</code>复合索引，这样就能够覆盖索引不需要回表。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>埋个坑，后面有时间会继续学习相比辅助索引聚簇索引平均会减少多少次IO操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前简单了解过Mysql的索引，今天来学习一下Mysql（InnoDB）的聚簇索引以及SQL为什么会产生回表查询？&lt;/p&gt;
&lt;h3 id=&quot;1-什么是回表查询？&quot;&gt;&lt;a href=&quot;#1-什么是回表查询？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是回表查询？&quot;&gt;&lt;/a&gt;1. 什么是回表查询？&lt;/h3&gt;&lt;p&gt;都知道Mysql存储的数据结构是B+Tree，所以当查询数据的时候能最快找到叶子节点的检索方式时是最快的。比如：主键直接定位行记录，而有些查询需要先检索索引树找到叶子节点的主键值，再通过主键值定位行记录这种扫描2次索引树的方式就叫做回表查询。&lt;/p&gt;
&lt;p&gt;如何确定SQL语句会不会造成回表查询？如下表：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`users`&lt;/span&gt;  (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`user`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;125&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; utf8mb4 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; utf8mb4 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`status`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;tinyint&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`created_at`&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; BTREE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`user`&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`user`&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; BTREE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`name`&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`name`&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; = utf8mb4 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; = utf8mb4_unicode_ci ROW_FORMAT = &lt;span class=&quot;keyword&quot;&gt;Compact&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2种查询方式：&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记 - Key事件通知</title>
    <link href="http://xupin.im/2020/08/10/redis-keyspace-notify/"/>
    <id>http://xupin.im/2020/08/10/redis-keyspace-notify/</id>
    <published>2020-08-09T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.612Z</updated>
    
    <content type="html"><![CDATA[<p>网上购物看到自己喜欢的东西加入购物车然后付款，但是在付款的突然不想要了 … 往往这个订单会给一个30分钟的支付时间，时间一到就自动关闭了 所以这是怎么做到的呢？</p><h3 id="1-实现方式"><a href="#1-实现方式" class="headerlink" title="1.实现方式"></a>1.实现方式</h3><ul><li><p>轮询</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">脚本每隔一定时间就去数据表检查一下状态，是否过期需要关闭。</span><br></pre></td></tr></table></figure></li><li><p>定时器</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建订单时开始计时，计时结束后直接处理关闭订单。</span><br></pre></td></tr></table></figure></li><li><p>数据库事件+存储过程</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据库建立检查事件，每隔一定时间去执行一次存储过程。</span><br></pre></td></tr></table></figure></li><li><p>Key事件通知</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于更改任何Redis Key的每个操作，都可以配置Redis将消息发布到Pub/Sub，然后订阅这些通知。</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-数据库事件-存储过程"><a href="#2-数据库事件-存储过程" class="headerlink" title="2.数据库事件+存储过程"></a>2.数据库事件+存储过程</h3><p>不多说，直接上SQL</p><a id="more"></a><ol><li><p>订单表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`orders`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`good_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'0:待付款，1:已付款，-1:订单关闭'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建存储过程，处理关闭订单。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> job_proce()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">update</span> orders <span class="keyword">set</span> <span class="keyword">status</span> = <span class="number">-1</span> <span class="keyword">where</span> time_to_sec(<span class="keyword">timediff</span>(<span class="keyword">now</span>(), created_at)) &gt; <span class="number">1800</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li><li><p>创建事件，调用存储过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> event_scheduler = <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EVENT</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> job_event</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE EVERY <span class="number">1</span> <span class="keyword">SECOND</span> <span class="comment"># 1秒检查一次</span></span><br><span class="line"><span class="keyword">ON</span> COMPLETION <span class="keyword">PRESERVE</span>  </span><br><span class="line"><span class="keyword">DO</span> <span class="keyword">CALL</span> job_proce();</span><br></pre></td></tr></table></figure></li><li><p>开启事件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">EVENT</span> job_event <span class="keyword">ON</span>  COMPLETION <span class="keyword">PRESERVE</span> <span class="keyword">ENABLE</span>;</span><br></pre></td></tr></table></figure></li></ol><p>这样<code>job_event</code>事件就会以1秒/次的频率去执行<code>job_proce</code>存储过程执行数据检查。</p><h3 id="3-Key事件通知"><a href="#3-Key事件通知" class="headerlink" title="3. Key事件通知"></a>3. Key事件通知</h3><p>Key事件通知（Redis Keyspace Notifications）机制自2.8版本以后出现，该机制默认是关闭的。可通过配置<code>redis.conf</code>进行开启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-events Ex # E表示Key事件通知，x代表Key过期行为。</span><br><span class="line"></span><br><span class="line"># notify-keyspace-events可配置参数</span><br><span class="line"># K 键空间事件，以__keyspace@&lt;db&gt;__前缀发布。</span><br><span class="line"># E 键事件事件，以__keyevent@&lt;db&gt;__前缀发布。</span><br><span class="line"># g 通用命令（非类型特定），如DEL，EXPIRE，RENAME等等</span><br><span class="line"># $ 字符串命令</span><br><span class="line"># l 列表命令</span><br><span class="line"># s 集合命令</span><br><span class="line"># h 哈希命令</span><br><span class="line"># z 有序集合命令</span><br><span class="line"># x 过期事件（每次键到期时生成的事件）</span><br><span class="line"># e 被驱逐的事件（当一个键由于达到最大内存而被驱逐时产生的事件）</span><br><span class="line"># A g$lshzxe的别名，因此字符串AKE表示所有的事件。</span><br></pre></td></tr></table></figure></p><p>修改配置开启Key事件通知以后，当Redis在删除过期Key的时候会向指定channel（过期行为的channel：<code>__keyevent@0__:expired</code>） publish消息，该消息可以使用subscribe/psubscribe进行订阅。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; PSUBSCRIBE __keyevent@<span class="number">0</span>__:expired</span><br><span class="line">Reading messages... (<span class="built_in">press</span> Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>所以我们只需要写个程序执行redis-&gt;psubscribe()进行监听即可。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>emmmm…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网上购物看到自己喜欢的东西加入购物车然后付款，但是在付款的突然不想要了 … 往往这个订单会给一个30分钟的支付时间，时间一到就自动关闭了 所以这是怎么做到的呢？&lt;/p&gt;
&lt;h3 id=&quot;1-实现方式&quot;&gt;&lt;a href=&quot;#1-实现方式&quot; class=&quot;headerlink&quot; title=&quot;1.实现方式&quot;&gt;&lt;/a&gt;1.实现方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;轮询&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;脚本每隔一定时间就去数据表检查一下状态，是否过期需要关闭。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定时器&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;创建订单时开始计时，计时结束后直接处理关闭订单。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库事件+存储过程&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;数据库建立检查事件，每隔一定时间去执行一次存储过程。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Key事件通知&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对于更改任何Redis Key的每个操作，都可以配置Redis将消息发布到Pub/Sub，然后订阅这些通知。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-数据库事件-存储过程&quot;&gt;&lt;a href=&quot;#2-数据库事件-存储过程&quot; class=&quot;headerlink&quot; title=&quot;2.数据库事件+存储过程&quot;&gt;&lt;/a&gt;2.数据库事件+存储过程&lt;/h3&gt;&lt;p&gt;不多说，直接上SQL&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="redis" scheme="http://xupin.im/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Git小知识 - Clone项目速度慢的小技巧</title>
    <link href="http://xupin.im/2020/07/05/git-cloning-slow/"/>
    <id>http://xupin.im/2020/07/05/git-cloning-slow/</id>
    <published>2020-07-04T16:00:00.000Z</published>
    <updated>2021-11-18T07:22:17.806Z</updated>
    
    <content type="html"><![CDATA[<p>碰上github网络抽风的时候，恰巧你又需要拉取github上托管的项目，这个时候看着2kb/s的下载速度是不是很抓狂？</p><h3 id="粗暴的解决方式"><a href="#粗暴的解决方式" class="headerlink" title="粗暴的解决方式"></a>粗暴的解决方式</h3><p>打开<a href="https://www.ipaddress.com" target="_blank" rel="noopener">ipaddress</a>查询以下三个域名的ip，写到hosts文件中。</p><ul><li>github.com</li><li>github.global.ssl.fastly.net</li><li>codeload.github.com</li></ul><h3 id="进阶的方式"><a href="#进阶的方式" class="headerlink" title="进阶的方式"></a>进阶的方式</h3><a id="more"></a><p>挂代理，哦豁<br>export ALL_PROXY=socks5://127.0.0.1:4000</p><h3 id="究极方式"><a href="#究极方式" class="headerlink" title="究极方式"></a>究极方式</h3><ol><li><p>复制你要拉取的项目github地址，比如：<a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core</a></p></li><li><p>打开<a href="https://gitee.com" target="_blank" rel="noopener">码云</a>，创建仓库-&gt;从 GitHub / GitLab 导入仓库</p></li><li><p>搞定！git clone <a href="https://gitee.com/xupinbest/v2ray-core" target="_blank" rel="noopener">https://gitee.com/xupinbest/v2ray-core</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;碰上github网络抽风的时候，恰巧你又需要拉取github上托管的项目，这个时候看着2kb/s的下载速度是不是很抓狂？&lt;/p&gt;
&lt;h3 id=&quot;粗暴的解决方式&quot;&gt;&lt;a href=&quot;#粗暴的解决方式&quot; class=&quot;headerlink&quot; title=&quot;粗暴的解决方式&quot;&gt;&lt;/a&gt;粗暴的解决方式&lt;/h3&gt;&lt;p&gt;打开&lt;a href=&quot;https://www.ipaddress.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ipaddress&lt;/a&gt;查询以下三个域名的ip，写到hosts文件中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github.com&lt;/li&gt;
&lt;li&gt;github.global.ssl.fastly.net&lt;/li&gt;
&lt;li&gt;codeload.github.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;进阶的方式&quot;&gt;&lt;a href=&quot;#进阶的方式&quot; class=&quot;headerlink&quot; title=&quot;进阶的方式&quot;&gt;&lt;/a&gt;进阶的方式&lt;/h3&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="github" scheme="http://xupin.im/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记 - goroutine</title>
    <link href="http://xupin.im/2020/06/12/goroutine/"/>
    <id>http://xupin.im/2020/06/12/goroutine/</id>
    <published>2020-06-11T16:00:00.000Z</published>
    <updated>2021-11-18T07:22:34.057Z</updated>
    
    <content type="html"><![CDATA[<p>在现在大数据、高并发，到处都充斥着流量的互联网时代，能不能应对高并发俨然已经发展成一个衡量服务端架构是否合格的标准，作为程序媛我们思考如何利用语言在代码层面最优设计能应对并发的程序去并行处理任务。在程序中对于任务并行处理一般趋于使用：进程、线程，以及另外一种：<code>协程</code>。支持协程的语言有很多，比如：C/C++、Ruby、 Python（2.5+）、Golang等等，它们有些是本身语言支持协程，有些则是需要引入第三方包来使用。不过，我们主要来学习一下Golang这门语言（简称Go），它是如何理解以及实现协程的。</p><h3 id="一、进程、线程和协程的前世今生"><a href="#一、进程、线程和协程的前世今生" class="headerlink" title="一、进程、线程和协程的前世今生"></a>一、进程、线程和协程的前世今生</h3><p>都知道一台计算机的核心是CPU，它承担着所有的运算。而计算机承载的操作系统（内核）则是负责所有任务的处理和调度CPU以及资源的分配。如果用人类来比喻，大脑是CPU，思维则是操作系统（内核）。</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>最早的计算机每次只能运行一个程序，如果还有其他程序需要执行则要排队等待。后来CPU运算能力提高了，这种方式过于原始有些浪费性能，于是尝试让多个程序可以并行执行，但是这样面临一个新的问题：跑在同一个CPU中的程序都会使用计算机资源，那程序的运行状态和数据怎么保障？<code>进程</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进程是内核资源管理分配的最小单位，每个进程都有独立的虚拟地址空间。内核中的每个程序都运行在独立进程的上下文中，上下文是由程序正常运行需要的一系列参数组成，参数包括存储器中的代码和数据，寄存器中的内容以及进程打开的文件描述符（文件句柄）等。可以把上下文通俗理解为：`环境`。</span><br></pre></td></tr></table></figure></p><p>如果程序在运行过程中需要进行IO操作，IO操作阻塞了程序后面的计算，这时候CPU属于空闲状态，那内核会把CPU切换到其他进程去处理。不过当进程数量变高以后，计算机的大部分资源都被进程切换这个操作消耗掉了。为什么说进程切换操作消耗资源代价比较高？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓进程切换其实就是上下文切换，需要切换新的页表并加载新的虚拟地址空间、切换内核栈以及硬件上下文等。只要发生进程切换操作就得反复进入内核，加载切换一系列状态。</span><br></pre></td></tr></table></figure></p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>为了减少这种开销，<code>线程</code>应运而生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程是内核调度CPU执行的最小单位，线程是运行在进程上下文的逻辑流，线程是具体执行程序的单位。一个进程至少包含一个主线程（可以拥有多个子线程），但是一个线程只能存在于一个进程中。</span><br></pre></td></tr></table></figure></p><p>线程切换相比进程切换开销就小了很多，线程切换只需要把寄存器刷新即可。</p><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>后面程序媛们发现线程这样还是有性能瓶颈（IO阻塞），无论是进程还是线程因为涉及到大量的计算机资源，所以都是由内核调度管理。能不能开发一种由代码控制的线程呢？这就是<code>协程</code>。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">协程是由用户控制的线程（用户态线程），协程在程序中实现自我调度，不需要像进程切换一样进入内核加载切换状态，提高了线程在IO上的性能问题（IO多路复用）。</span><br></pre></td></tr></table></figure><p>但是协程也有个致命的问题，假如进程中的某一程序出现了阻塞操作同时被CPU中断处理（抢占式调度），那么该进程中的所有线程都会被阻塞。</p><p>后面会专门写一篇关于进程和线程以及协程的特性以及区别。（不够详细，埋坑Orz~）</p><h3 id="二、什么是goroutine？"><a href="#二、什么是goroutine？" class="headerlink" title="二、什么是goroutine？"></a>二、什么是goroutine？</h3><p>上面简单学习了进程和线程以及协程的渊源，虽然不够详细但是我们大概知道其实在进程或者线程甚至于协程存在的性能瓶颈大部分是CPU调度问题。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> // <span class="title">Go</span>语言启动协程，只需要使用<span class="title">go</span>关键字即可启动协程运行函数。使用<span class="title">go</span>关键字创建的这个协程就叫做`<span class="title">goroutine</span>`</span></span><br></pre></td></tr></table></figure><p>之前说了goroutine是Go语言的协程，其实这么理解是可以的但goroutine比协程更强大。它们使用的线程模型有着本质的区别，如下：</p><blockquote><p>goroutine通过通道来通信，而协程通过让出执行和恢复操作来通信。</p><p>goroutine通过Go语言的调度器进行调度，而协程通过程序本身调度。</p></blockquote><p>大部分语言或者第三方库提供的协程就是使用的用户态线程模型，但goroutine使用的不是传统的用户态线程模型。以下主流的线程模型：</p><ul><li>内核级线程模型<br>  内核级别的线程的状态切换需要内核直接处理，所以内核清楚的知道每一个KSE（Kernel Scheduling Entity）的存在（即内核线程和KSE是一对一关系），它们可以全系统内进行资源的竞争。</li><li>用户级线程模型（用户态线程，协程）<br>  用户态级别的线程受用户控制，内核并不直接知道用户态线程的存在（为什么这么说？因为用户态线程和内核线程存在着多对一的关系，即多个用户态线程对应一个内核线程），一般用户态多线程属于同一个进程，所以它们只能在进程内进行资源竞争。</li><li>两级线程模型（混合型线程模型）<br>  两级线程模型吸取了内核级和用户级线程的经验，两级线程模型下的线程和内核线程处于多对多的关系。一个进程内的多个线程可以分别绑定内核线程，既可以多个线程绑定多个内核线程也可以多个线程绑定一个内核线程，当某个线程内的程序产生阻塞其绑定的内核线程被CPU中断处理，进程内的其他线程可以重新与其他内核线程绑定。</li></ul><p><img src="/assets/goroutine/thread_model.png" alt></p><p>goroutine使用的正是两级线程模型，但是这种多个线程跑在多个内核中，既不是用户级线程模型完全靠自身调度也不是内核级线程模型完全依赖内核调度，而是用户和内核协同调度。因为这种模型复杂性较高，所以Go语言开发了自己的runtime调度器。</p><h3 id="三、Go-runtime调度器"><a href="#三、Go-runtime调度器" class="headerlink" title="三、Go runtime调度器"></a>三、Go runtime调度器</h3><p>Go runtime调度器的结构由三部分组成:</p><ul><li>G<br>  Goroutine，每个goroutine有对应的G结构体，G结构体储存goroutine的上下文信息。G并不能直接被调度，需要绑定对应的P才能被调度执行。</li><li><p>P<br>  Processor，为G和M进行调度的逻辑处理器，对于G来说P像是内核，而在M看来P相当于上下文。P的数量可以在程序中代码控制，如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.GOMAXPROCS(runtime.NumCPU()) <span class="comment">// 该值最大为256。</span></span><br></pre></td></tr></table></figure></li><li><p>M<br>  Machine，负责调度任务（可以理解为内核线程的抽象），代表着操作系统内核，是真正处理任务的服务。M的数量不是固定的，受Go runtime调度器控制。（不过该值最大为10000，可以参考：<a href="https://github.com/golang/go/blob/master/src/runtime/proc.go#L540" target="_blank" rel="noopener">src/runtime/proc.go</a>）</p></li></ul><p>值得一提的是Go语言在最初的版本中Go runtime调度器的结构是GM模型（并非GMP模型），P服务是因为GM模型在并发上出现很大的性能损耗。有兴趣的小伙伴可以看一下Go runtime的核心开发者Dmitry Vyukov发现的问题<a href="https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#heading=h.mmq8lm48qfcw" target="_blank" rel="noopener">Scalable Go Scheduler Design Doc</a>。</p><p>简单说了一下Go runtime调度器中的GPM模型的概念，那么GPM究竟是怎么调度的呢？<br>首先当通过<code>go func()</code>创建一个G对象的时候，G会被优先放入P的本地队列。为了执行G M需要绑定一个P，然后M启动内核线程并循环从P的本地队列取出G并执行。<br><img src="/assets/goroutine/gmp.png" alt></p><p>当P发现当前绑定的M被阻塞时会转入绑定其他M（新的M可能是被创建或者从内核线程缓存中取出）。<br><img src="/assets/goroutine/gmp-m.png" alt></p><p>如果M处理完了当前P的本地队列里的G后，P会尝试从全局队列里取G来执行（同样P也会周期性的检查全局队列是否有G可以执行）。如果全局队列没有可以执行的G，P会随机挑选另外一个P并从它的本地队列中取出一半G到自己的本地队列中执行。这个动作使用调度算法<code>work-stealing</code>（工作窃取算法）实现。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上就是Go runtime调度器的运行原理（大概），后面有更深入的理解会补充进来。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在现在大数据、高并发，到处都充斥着流量的互联网时代，能不能应对高并发俨然已经发展成一个衡量服务端架构是否合格的标准，作为程序媛我们思考如何利用语言在代码层面最优设计能应对并发的程序去并行处理任务。在程序中对于任务并行处理一般趋于使用：进程、线程，以及另外一种：&lt;code&gt;协程&lt;/code&gt;。支持协程的语言有很多，比如：C/C++、Ruby、 Python（2.5+）、Golang等等，它们有些是本身语言支持协程，有些则是需要引入第三方包来使用。不过，我们主要来学习一下Golang这门语言（简称Go），它是如何理解以及实现协程的。&lt;/p&gt;
&lt;h3 id=&quot;一、进程、线程和协程的前世今生&quot;&gt;&lt;a href=&quot;#一、进程、线程和协程的前世今生&quot; class=&quot;headerlink&quot; title=&quot;一、进程、线程和协程的前世今生&quot;&gt;&lt;/a&gt;一、进程、线程和协程的前世今生&lt;/h3&gt;&lt;p&gt;都知道一台计算机的核心是CPU，它承担着所有的运算。而计算机承载的操作系统（内核）则是负责所有任务的处理和调度CPU以及资源的分配。如果用人类来比喻，大脑是CPU，思维则是操作系统（内核）。&lt;/p&gt;
&lt;h4 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h4&gt;&lt;p&gt;最早的计算机每次只能运行一个程序，如果还有其他程序需要执行则要排队等待。后来CPU运算能力提高了，这种方式过于原始有些浪费性能，于是尝试让多个程序可以并行执行，但是这样面临一个新的问题：跑在同一个CPU中的程序都会使用计算机资源，那程序的运行状态和数据怎么保障？&lt;code&gt;进程&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;进程是内核资源管理分配的最小单位，每个进程都有独立的虚拟地址空间。内核中的每个程序都运行在独立进程的上下文中，上下文是由程序正常运行需要的一系列参数组成，参数包括存储器中的代码和数据，寄存器中的内容以及进程打开的文件描述符（文件句柄）等。可以把上下文通俗理解为：`环境`。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果程序在运行过程中需要进行IO操作，IO操作阻塞了程序后面的计算，这时候CPU属于空闲状态，那内核会把CPU切换到其他进程去处理。不过当进程数量变高以后，计算机的大部分资源都被进程切换这个操作消耗掉了。为什么说进程切换操作消耗资源代价比较高？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;所谓进程切换其实就是上下文切换，需要切换新的页表并加载新的虚拟地址空间、切换内核栈以及硬件上下文等。只要发生进程切换操作就得反复进入内核，加载切换一系列状态。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h4&gt;&lt;p&gt;为了减少这种开销，&lt;code&gt;线程&lt;/code&gt;应运而生。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;线程是内核调度CPU执行的最小单位，线程是运行在进程上下文的逻辑流，线程是具体执行程序的单位。一个进程至少包含一个主线程（可以拥有多个子线程），但是一个线程只能存在于一个进程中。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;线程切换相比进程切换开销就小了很多，线程切换只需要把寄存器刷新即可。&lt;/p&gt;
&lt;h4 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h4&gt;&lt;p&gt;后面程序媛们发现线程这样还是有性能瓶颈（IO阻塞），无论是进程还是线程因为涉及到大量的计算机资源，所以都是由内核调度管理。能不能开发一种由代码控制的线程呢？这就是&lt;code&gt;协程&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="goroutine" scheme="http://xupin.im/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>Mysql小知识 - 查找连续编号中的缺失编号</title>
    <link href="http://xupin.im/2020/04/13/mysql-trick/"/>
    <id>http://xupin.im/2020/04/13/mysql-trick/</id>
    <published>2020-04-12T16:00:00.000Z</published>
    <updated>2021-11-18T07:23:01.973Z</updated>
    
    <content type="html"><![CDATA[<p>在和小伙伴讨论问题的时候，小伙伴突然问了我这样一个小问题，数据库中如何查找连续编号中的缺失编号？</p><h3 id="1-描述"><a href="#1-描述" class="headerlink" title="1.描述"></a>1.描述</h3><p>场景大概是这样，有一份连续数据ID：1 … 27，其中ID：6，7，14的数据丢了。结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`letter`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">27</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'D'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'E'</span>);</span><br><span class="line"><span class="comment"># INSERT INTO `letter` VALUES (6, 'F');</span></span><br><span class="line"><span class="comment"># INSERT INTO `letter` VALUES (7, 'J');</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">'H'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">'I'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">'J'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">'K'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">'L'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">'M'</span>);</span><br><span class="line"><span class="comment"># INSERT INTO `letter` VALUES (14, 'N');</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">'O'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">'P'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">'Q'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">'R'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="string">'S'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">'T'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="string">'U'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">22</span>, <span class="string">'V'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">23</span>, <span class="string">'W'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">24</span>, <span class="string">'X'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">25</span>, <span class="string">'Y'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`letter`</span> <span class="keyword">VALUES</span> (<span class="number">26</span>, <span class="string">'Z'</span>);</span><br></pre></td></tr></table></figure></p><p>怎么把6，7，14这三条数据找出来？方法有很多种哈，今天我们说一下如何利用SQL快速查询出来。大概思路是把ID+1，然后查询ID+1这个值是否存在ID列表中，如果不存在那肯定就是缺失的。SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">id</span> + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`letter`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">id</span> + <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="string">`letter`</span> )</span><br></pre></td></tr></table></figure></p><p>但是这样会有一个小问题，就是MAX(id)+1（27）也会被查询出来，所以：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">id</span> + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`letter`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">id</span> + <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="string">`letter`</span> ) </span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">id</span> &lt;(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">max</span>( <span class="keyword">id</span> ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`letter`</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="2-优化"><a href="#2-优化" class="headerlink" title="2.优化"></a>2.优化</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">start_id,</span><br><span class="line">( <span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="keyword">id</span>)- <span class="number">1</span> <span class="keyword">FROM</span> <span class="string">`letter`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt; start_id ) <span class="keyword">AS</span> end_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">id</span> + <span class="number">1</span> <span class="keyword">AS</span> start_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`letter`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">id</span> + <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="string">`letter`</span> ) </span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">id</span> &lt;(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">id</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`letter`</span> </span><br><span class="line">) </span><br><span class="line">) <span class="keyword">AS</span> max_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">start_id</span><br></pre></td></tr></table></figure><p>这种情况适用于查找整数类型的连续编号，那么如果编号是string类型的呢？后面有机会再补充进来=,=。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在和小伙伴讨论问题的时候，小伙伴突然问了我这样一个小问题，数据库中如何查找连续编号中的缺失编号？&lt;/p&gt;
&lt;h3 id=&quot;1-描述&quot;&gt;&lt;a href=&quot;#1-描述&quot; class=&quot;headerlink&quot; title=&quot;1.描述&quot;&gt;&lt;/a&gt;1.描述&lt;/h3&gt;&lt;p&gt;场景大概是这</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记 - 集群</title>
    <link href="http://xupin.im/2020/03/27/redis-cluster/"/>
    <id>http://xupin.im/2020/03/27/redis-cluster/</id>
    <published>2020-03-26T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.611Z</updated>
    
    <content type="html"><![CDATA[<p>之前粗浅的学习了Redis三种集群策略的主从复制和哨兵策略，现在最后这篇来学习一下Redis Cluster也就是最后一个集群策略。</p><h3 id="1-什么是集群？"><a href="#1-什么是集群？" class="headerlink" title="1.什么是集群？"></a>1.什么是集群？</h3><p>集群（Cluster），Redis2.6版本（正式版本是3.0）推出的分布式解决方案，有效解决了单Master节点写操作的压力并且分布式存储数据，大大提高了负载能力。</p><blockquote><p>在Redis发布3.0正式版本前，一般使用代理中间件来实现分布式集群策略。这里不展开学习了，有兴趣的小伙伴自行研究。</p></blockquote><ul><li><p>特点</p><ol><li>Cluster策略是分布式部署，节点间相互协调工作。<blockquote><p>因为对主从复制和哨兵策略都称为集群策略，所以为了防止误解在下文中提及的集群（Cluster）策略，直接用Cluster称呼。</p></blockquote></li><li>Cluster至少要3个Master节点，并且是无中心化设计。</li><li>客户端使用Cluster，不需要连接所有节点，只需要连接Cluster中任意一个可用节点即可。</li><li>数据的分布式存储不需要指定，Cluster会自动完成。</li></ol></li><li><p>优点</p><ol><li>Cluster策略拥有主从复制和哨兵策略的优点。</li><li>解决了单Master节点写操作的压力。</li><li>分布式存储数据，提高了负载能力。</li><li>支持线性扩容。</li></ol></li></ul><a id="more"></a><ul><li>缺点<ol><li>部分操作命令受限，比如mset，目前只能支持同一个插槽（slot）的key进行操作。</li><li>事务机制不支持多节点操作。</li><li>不支持多数据库，即只有db0。</li></ol></li></ul><h3 id="2-如何配置（新旧方式）"><a href="#2-如何配置（新旧方式）" class="headerlink" title="2.如何配置（新旧方式）"></a>2.如何配置（新旧方式）</h3><ul><li>旧方式，./redis-trib.rb create –replicas {SLAVE_NUM} {IP}:{PORT} … {IP}:{PORT}</li><li>新方式，./redis-cli –cluster create –cluster-replicas {SLAVE_NUM} {IP}:{PORT} … {IP}:{PORT}</li></ul><p>redis.conf示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否以守护进程方式运行</span></span><br><span class="line">daemonize yes/no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用Cluster</span></span><br><span class="line">cluster-enabled yes/no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点信息配置文件，自动生成。</span></span><br><span class="line"><span class="comment"># FILE_NAME：配置文件名</span></span><br><span class="line">cluster-cluster-config-file &#123;FILE_NAME&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点连接超时时间</span></span><br><span class="line"><span class="comment"># MS：超时时间（单位：Millisecond）</span></span><br><span class="line">cluster-node-timeout &#123;MS&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-工作机制"><a href="#3-工作机制" class="headerlink" title="3.工作机制"></a>3.工作机制</h3><ul><li>Redis节点启动，节点根据配置<code>cluster-enabled</code>判断是否加入Cluster。</li><li>新节点通过<code>cluster meet {IP} {PORT}</code>命令和其他节点感知并建立连接，节点间会通过<code>Gossip协议</code>PING/PONG命令来检测状态和交换信息。 </li><li>Cluster计算并且分配主节点插槽数量。<code>这个地方注意，不是插槽数量，是每个节点的插槽数量。插槽数量是固定的：16384。</code></li><li>插槽分配成功之后，Cluster开始服务。</li></ul><h3 id="4-如何感知新节点？"><a href="#4-如何感知新节点？" class="headerlink" title="4.如何感知新节点？"></a>4.如何感知新节点？</h3><p>当给某一节点发送命令<code>cluster meet {IP} {PORT}</code>（新节点），该节点就会尝试与新节点建立连接，具体流程：</p><ul><li>该节点向新节点发送MEET命令。</li><li>新节点接收到MEET命令后，回复PONG命令。</li><li>该节点接收到新节点返回的PONG命令，知道新节点成功接收了自己的MEET命令。</li><li>该节点向新节点发送PING命令。</li><li>新节点接收到该节点发送的PING命令，知道该节点已经成功接收到自己返回的PONG命令。</li><li>该节点和新节点握手完成，建立连接。</li><li>最后，该节点会将新节点的信息通过<code>Gossip协议</code>同步给Cluster中的其他节点，让其他节点也与新节点进行握手，建立连接。</li></ul><blockquote><p>可以通过<code>cluster nodes</code>命令查看集群中哪些节点已经建立连接。</p></blockquote><h3 id="5-数据插槽"><a href="#5-数据插槽" class="headerlink" title="5.数据插槽"></a>5.数据插槽</h3><p>说到插槽（slot）不得不提一下，为了能够让数据平均分配到多个节点上而采用的数据分区算法。常见的数据分区算法：范围（Range）、哈希（Hash）、一致性哈希算法和虚拟哈希槽等。</p><p>Cluster采用的虚拟哈希槽数据分区算法，所有的key根据哈希函数映射到0 ~ 16383插槽内（公式：slot = crc16(key) &amp; 16383），之前也提到过插槽也是平均分配到每个Master节点的。</p><ul><li>虚拟哈希槽的特点<ol><li>降低了节点和数据之间的耦合性，方便线性扩容&amp;动态管理节点。</li><li>节点自己管理和插槽的对应关系。</li><li>支持查询节点、插槽和key的对应关系。</li></ol></li></ul><p>可以通俗理解为，插槽是Cluster管理数据的基本单位。</p><h3 id="6-动态管理节点"><a href="#6-动态管理节点" class="headerlink" title="6.动态管理节点"></a>6.动态管理节点</h3><p>假如我们原有4个Master节点（M1 … M4），但是现在因为数据增量问题临时加一个Master节点（M5），我们需要怎么操作呢？</p><ul><li>启动M5节点，客户端发送MEET命令让M5节点加入到Cluster中，现在M5节点没有任何插槽所以不会接受任何读写操作。</li><li>在M5节点执行<code>cluster setslot {SLOT} importing {SOURCE_NODE_ID}</code>命令，让M5节点准备导入{SLOT}插槽。</li><li>在拥有这个{SLOT}插槽的源节点上面执行<code>cluster setslot {SLOT} migrating {M5_NODE_ID}</code>，让源节点准备好迁出插槽。</li><li>这时候如果客户端操作的key存在于{SLOT}插槽中，那么这个操作由源节点处理。如果key不存在于{SLOT}插槽中，这个操作将由M5节点操作。</li><li>现在源节点的{SLOT}插槽不会创建任何新的key，需要把源节点{SLOT}插槽中的key迁移到M5节点。执行<code>cluster getkeysinslot {SLOT} {COUNT}</code>命令获取{SLOT}插槽中指定{COUNT}数量的key列表。</li><li>在源节点对每个key执行<code>migrate</code>命令，把key迁移到M5节点。</li><li>在源节点和M5节点执行<code>cluster setslot {SLOT} NODE {M5_NODE_ID}</code>，完成迁移。</li></ul><p>这就是动态增加节点的流程了，可能在新的Redis版本中增加了节点迁移工具，但是核心流程应该还是这样。</p><h3 id="7-Hash-Tag"><a href="#7-Hash-Tag" class="headerlink" title="7.Hash Tag"></a>7.Hash Tag</h3><p>学习了数据插槽，我们知道Redis在key分配到插槽的这一操作完全是自动化的，不过当我们有需求对不同的key需要放到同一插槽中的时候，这个时候要怎么操作呢？我们只需要在key中加入{}符号即可，比如：</p><ul><li>{UID_1001}:following</li><li>{UID_1001}:followers</li></ul><p>这两个key会被分配到同一插槽，原理就是当key中存在{}符号，哈希算法只会针对{}符号内的字符串。</p><h3 id="8-插槽为什么是16384？这个值能修改吗？"><a href="#8-插槽为什么是16384？这个值能修改吗？" class="headerlink" title="8.插槽为什么是16384？这个值能修改吗？"></a>8.插槽为什么是16384？这个值能修改吗？</h3><p>首先crc16算法算出的值有16bit，2^16即65536。也就是说该算法的值在0 ~ 65535之间，那么为什么作者还是选择了16384即0 ~ 16383。</p><p>很开心，对于这个疑问Redis作者给了明确的回答。前面我们知道每个节点之间会以每秒1次的频率互相发送心跳包（PING）&amp;交换信息（信息分为消息头和消息体），之前也提了交换的信息体里面主要包含节点的信息等，那么消息头的内容呢？如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> sig[<span class="number">4</span>];        <span class="comment">/* Siganture "RCmb" (Redis Cluster message bus). */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> totlen;    <span class="comment">/* Total length of this message */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> ver;       <span class="comment">/* Protocol version, currently set to 1. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> port;      <span class="comment">/* TCP base port number. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> type;      <span class="comment">/* Message type */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> count;     <span class="comment">/* Only used for some kind of messages. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> currentEpoch;  <span class="comment">/* The epoch accordingly to the sending node. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> configEpoch;   <span class="comment">/* The config epoch if it's a master, or the last</span></span><br><span class="line"><span class="comment">                               epoch advertised by its master if it is a</span></span><br><span class="line"><span class="comment">                               slave. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> offset;    <span class="comment">/* Master replication offset if node is a master or</span></span><br><span class="line"><span class="comment">                           processed replication offset if node is a slave. */</span></span><br><span class="line">    <span class="keyword">char</span> sender[CLUSTER_NAMELEN]; <span class="comment">/* Name of the sender node */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> myslots[CLUSTER_SLOTS/<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">char</span> slaveof[CLUSTER_NAMELEN];</span><br><span class="line">    <span class="keyword">char</span> myip[NET_IP_STR_LEN];    <span class="comment">/* Sender IP, if not all zeroed. */</span></span><br><span class="line">    <span class="keyword">char</span> notused1[<span class="number">34</span>];  <span class="comment">/* 34 bytes reserved for future usage. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> cport;      <span class="comment">/* Sender TCP cluster bus port */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> flags;      <span class="comment">/* Sender node flags */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state; <span class="comment">/* Cluster state from the POV of the sender */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> mflags[<span class="number">3</span>]; <span class="comment">/* Message flags: CLUSTERMSG_FLAG[012]_... */</span></span><br><span class="line">    <span class="keyword">union</span> clusterMsgData data; <span class="comment">/* message body*/</span></span><br><span class="line">&#125; clusterMsg;</span><br></pre></td></tr></table></figure></p><p>其中有个<code>myslots</code>字段要注意，该字段使用位图，即1bit代表1slot，如果该bit为1即说明该插槽属于这个节点。那么该字段的大小为：16384 / 8bit / 1024b = 2kb。也就是消息头不考虑其他信息的情况，单是<code>myslots</code>就已经有2kb大小。</p><p>那么消息体呢？之前已经提到了消息体中会包含节点信息。具体是什么样的呢？消息体每次携带最少3个节点的信息，数量约为总节点数的1/10。如果节点数量越多，消息体越大。</p><ol><li>如果插槽数量是65535，那么该字段的大小放大为：65535 / 8bit / 1024b = 8kb。这对于每秒1次频率的心跳包来讲，带宽开销是极大的。</li><li>上面说了节点越多，消息体也就越大，如果节点超过1000个也会导致网络拥堵，因为Redis作者不建议Cluster节点的数量超过1000，那么对于1000个以下的节点来说16384个插槽也就够用了。</li><li>第三个考虑是关于位图的压缩问题，我还没有搞明白~~所以这里不展开说了，先埋个坑。</li></ol><p>这个值能修改吗？<code>16384插槽数量是写死在Redis源代码中的，所以是不可以更改的。</code></p><p>附上关于作者的回答</p><blockquote><p><a href="https://github.com/antirez/redis/issues/2576" target="_blank" rel="noopener">https://github.com/antirez/redis/issues/2576</a></p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Cluster在故障恢复主从切换的机制（包括：主观宕机、客观宕机、投票选举、主从切换）和哨兵策略基本一致，所以在这里就不学习Cluster关于故障恢复主从切换的相关知识了。</p><p>前面提到过Gossip协议，它主要职责就是各节点间的信息交换，常用的Gossip消息可分为：</p><ul><li>ping</li><li>pong</li><li>meet</li><li>fail</li></ul><p>后面会专门来学习Gossip协议的知识（-,-再次埋个坑）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前粗浅的学习了Redis三种集群策略的主从复制和哨兵策略，现在最后这篇来学习一下Redis Cluster也就是最后一个集群策略。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是集群？&quot;&gt;&lt;a href=&quot;#1-什么是集群？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是集群？&quot;&gt;&lt;/a&gt;1.什么是集群？&lt;/h3&gt;&lt;p&gt;集群（Cluster），Redis2.6版本（正式版本是3.0）推出的分布式解决方案，有效解决了单Master节点写操作的压力并且分布式存储数据，大大提高了负载能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Redis发布3.0正式版本前，一般使用代理中间件来实现分布式集群策略。这里不展开学习了，有兴趣的小伙伴自行研究。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cluster策略是分布式部署，节点间相互协调工作。&lt;blockquote&gt;
&lt;p&gt;因为对主从复制和哨兵策略都称为集群策略，所以为了防止误解在下文中提及的集群（Cluster）策略，直接用Cluster称呼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Cluster至少要3个Master节点，并且是无中心化设计。&lt;/li&gt;
&lt;li&gt;客户端使用Cluster，不需要连接所有节点，只需要连接Cluster中任意一个可用节点即可。&lt;/li&gt;
&lt;li&gt;数据的分布式存储不需要指定，Cluster会自动完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cluster策略拥有主从复制和哨兵策略的优点。&lt;/li&gt;
&lt;li&gt;解决了单Master节点写操作的压力。&lt;/li&gt;
&lt;li&gt;分布式存储数据，提高了负载能力。&lt;/li&gt;
&lt;li&gt;支持线性扩容。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="redis" scheme="http://xupin.im/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记 - 哨兵</title>
    <link href="http://xupin.im/2020/03/26/redis-sentinel/"/>
    <id>http://xupin.im/2020/03/26/redis-sentinel/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.612Z</updated>
    
    <content type="html"><![CDATA[<p>现在这篇来学习一下Redis Sentinel即哨兵策略的相关知识。</p><h3 id="1-什么是哨兵？"><a href="#1-什么是哨兵？" class="headerlink" title="1.什么是哨兵？"></a>1.什么是哨兵？</h3><p>哨兵（Sentinel），Redis2.6版本（正式版本是2.8，现2.6版本已被废弃）开始提供的一种集群策略，核心思想是解决了主从复制（Replication）在Master节点故障，无法自动切换Slave节点为新Master节点的问题。</p><ul><li><p>特点</p><ol><li>哨兵策略是分布式部署，节点间相互协调工作。</li><li>哨兵集群至少要3个节点。</li><li>可以把哨兵看作是一种特殊的Redis服务。</li></ol></li><li><p>优点</p><ol><li>哨兵策略拥有主从复制的优点。</li><li>哨兵策略解决了Master节点故障，无法自动切换Slave节点为新Master节点的问题。</li></ol></li></ul><a id="more"></a><ul><li>缺点<ol><li>Master节点写操作的压力没有得到解决。</li><li>数据存储能力还是受到单节点限制。</li></ol></li></ul><h3 id="2-如何配置（多种方式）"><a href="#2-如何配置（多种方式）" class="headerlink" title="2.如何配置（多种方式）"></a>2.如何配置（多种方式）</h3><ul><li>启动Redis哨兵，./redis-sentinel redis-sentinel.conf</li><li>启动Redis服务时并且启动哨兵，./redis-server redis-sentinel.conf –sentinel</li></ul><p>redis-sentinel.conf示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哨兵监控的节点。</span></span><br><span class="line"><span class="comment"># MASTER_NAME：自定义的Master节点名称。</span></span><br><span class="line"><span class="comment"># IP：Master节点的地址。</span></span><br><span class="line"><span class="comment"># PORT：Master节点的端口。</span></span><br><span class="line"><span class="comment"># QUORUM：当Master节点故障，确认Master节点odown最少的哨兵数量。</span></span><br><span class="line">sentinel monitor &#123;MASTER_NAME&#125; &#123;IP&#125; &#123;PORT&#125; &#123;QUORUM&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵验证</span></span><br><span class="line"><span class="comment"># PASS：Master节点的auth，需要注意的时哨兵不能同时为Master节点和Slave节点设置密码，所以auth需要保持一致。</span></span><br><span class="line">sentinel auth-pass &#123;MASTER_NAME&#125; &#123;PASS&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵心跳Ping最大时间，如果哨兵向Master节点发送Ping超过这个时间或者回复err，那么哨兵会主观（sdown）认为该Master节点已经处于不可用状态。</span></span><br><span class="line"><span class="comment"># MS：心跳Ping等待响应的最大时间（单位：Millisecond）。</span></span><br><span class="line">sentinel down-after-milliseconds &#123;MASTER_NAME&#125; &#123;MS&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时同步数据的Slave节点数量</span></span><br><span class="line"><span class="comment"># SLAVE_NUM：当Master节点故障，Slave节点通过竞选当选新Master节点，最多允许几个Slave节点开始同步新Master的数据。</span></span><br><span class="line">sentinel parallel-syncs &#123;MASTER_NAME&#125; &#123;SLAVE_NUM&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从节点切换所需要的最大时间。</span></span><br><span class="line"><span class="comment"># MS：主从节点切换所需要的最大时间（单位：Millisecond）。</span></span><br><span class="line">sentinel failover-timeout &#123;MASTER_NAME&#125; &#123;MS&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Master节点故障调用的脚本</span></span><br><span class="line"><span class="comment"># SCRIPT_PATH：脚本路径</span></span><br><span class="line">sentinel notification-script &#123;MASTER_NAME&#125; &#123;SCRIPT_PATH&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-工作机制"><a href="#3-工作机制" class="headerlink" title="3.工作机制"></a>3.工作机制</h3><ol><li>哨兵向已知节点和哨兵发送心跳包检测状态。</li><li>Master节点无效回复，哨兵判断Master节点状态：主观宕机，客观宕机。</li><li>Master节点被确定客观宕机，进行领头（Leader）哨兵选举。</li><li>准备进行主从切换的领头哨兵获取其他哨兵的授权。</li><li>授权成功，从Slave节点中选举新Master节点。</li><li>领头哨兵把新Master节点信息同步给其他哨兵，其他哨兵把新Master节点信息同步对应Slave节点。</li></ol><h3 id="4-心跳包"><a href="#4-心跳包" class="headerlink" title="4.心跳包"></a>4.心跳包</h3><p>每个哨兵以每秒钟1次的频率向它已知的Master节点、Slave节点和其他哨兵发送PING命令，希望得到的有效回复如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PING replied with +PONG.</span><br><span class="line">PING replied with -LOADING error.</span><br><span class="line">PING replied with -MASTERDOWN error.</span><br></pre></td></tr></table></figure></p><p>其它任何回复或者无回复都是无效回复。</p><h3 id="5-哨兵和节点之间的自动发现机制"><a href="#5-哨兵和节点之间的自动发现机制" class="headerlink" title="5.哨兵和节点之间的自动发现机制"></a>5.哨兵和节点之间的自动发现机制</h3><p>通过Redis的pub/sub系统实现，每个哨兵都会向自己监控的节点对应的channel：<strong>sentinel</strong>:hello发送一条消息（消息体包含自己的{IP}、{PORT}和{RUNID}以及Master节点的完整配置），每个订阅该channel的哨兵都可以消费这条消息并且能发现到其他哨兵的存在，如果某个哨兵发现自己维护的节点配置低于新接收的节点配置，则会用新的节点配置进行覆盖。</p><h3 id="6-主观-客观宕机"><a href="#6-主观-客观宕机" class="headerlink" title="6.主观/客观宕机"></a>6.主观/客观宕机</h3><p>如果一个Master节点在收到PING命令后没有在有效时间内（down-after-milliseconds）进行有效回复，则会被标记为主观宕机（sdown，Subjectively Down）。</p><p>哨兵会获取其他哨兵检测该节点的状态，命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IP：主观宕机的Master节点地址</span></span><br><span class="line"><span class="comment"># PORT：主观宕机的Master节点端口</span></span><br><span class="line"><span class="comment"># CURRENT_EPOCH：哨兵的配置纪元，用于领头哨兵选举。</span></span><br><span class="line"><span class="comment"># RUNID：可以是*和哨兵的RunID，当值是 * 代表检测节点是否主观宕机，如果是RunID则用于领头哨兵选举。</span></span><br><span class="line">SENTINEL is-master-down-byaddr &#123;IP&#125; &#123;PORT&#125; &#123;CURRENT_EPOCH&#125; &#123;RUNID&#125;</span><br></pre></td></tr></table></figure></p><p>当有足够数量（{QUORUM}）的哨兵都认为该Master节点处于主观宕机状态。则该Master节点会被标记为客观宕机（odown，Objectively Down），若没有足够数量的哨兵都认为该Master节点处于主观宕机状态，则不会被标记为客观宕机，同时如果该Master节点重新返回哨兵有效回复，该Master节点主观宕机状态会被移除。</p><h3 id="7-领头哨兵选举"><a href="#7-领头哨兵选举" class="headerlink" title="7.领头哨兵选举"></a>7.领头哨兵选举</h3><p>因为只需要一个哨兵完成主从切换，所以需要选举一个领头哨兵。</p><ol><li>每个哨兵都会发送<code>SENTINEL is-master-down-byaddr</code>命令希望成为领头哨兵。收到该命令的哨兵如果没有同意过其他哨兵的同样命令，那么同意该请求，否则拒绝。</li><li>如果某一哨兵发现同意自己请求的哨兵数量并且数量大于等于{QUORUM}，那么它将成为领头哨兵。</li><li>如果选举过程中有多个哨兵当选领头哨兵，等待一段时间后选举会重新进行。</li></ol><blockquote><p>该方法基于raft算法领头选举方法实现。</p></blockquote><h3 id="8-主从切换授权"><a href="#8-主从切换授权" class="headerlink" title="8.主从切换授权"></a>8.主从切换授权</h3><p>当选举出领头哨兵之后并未马上进行主从切换，领头哨兵还需要获取{MAJORITY}数量的哨兵授权。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># MAJORITY：该值不可配置，Redis自行计算。公式：majority = voters / <span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><ul><li>如果{QUORUM} &lt; {MAJORITY}，领头哨兵需要{MAJORITY}数量的哨兵进行授权。</li><li>如果{QUORUM} &gt;= {MAJORITY}，那么领头哨兵需要{QUORUM}数量的哨兵授权才可以。</li></ul><p>当领头哨兵获得授权之后，正式开始主从切换流程。</p><h3 id="9-主从切换"><a href="#9-主从切换" class="headerlink" title="9.主从切换"></a>9.主从切换</h3><p>开始主从切换（failover），首先领头哨兵会选举出一个Slave节点出来作为新Master节点，该Slave节点选举参考参数：</p><ul><li><p>该节点和Master节点断开的时长，如果一个Slave节点与Master节点断开连接时间已经超过<code>down-after-milliseconds</code>参数的<code>10倍</code>，再加上Master宕机的时长，该Slave节点就会被认为不适合选举为新的Master节点。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state</span><br></pre></td></tr></table></figure></li><li><p>Slave节点的优先级（slave-priority），slave-priority越低优先级越高。</p></li><li>复制数据偏移量（复制数据最完整）</li><li>RunID（最小的）</li></ul><h3 id="10-配置同步"><a href="#10-配置同步" class="headerlink" title="10.配置同步"></a>10.配置同步</h3><p>在领头哨兵完成主从切换之后，会在本地生成最新的Master配置然后通过pub/sub消息机制同步给其他哨兵，其他哨兵则更新对应的Master节点配置。</p><p>那么其他哨兵怎么知道这份配置是最新的呢？</p><blockquote><p>领头哨兵准备执行主从切换前，会从要切换成新Master节点的Slave节点取得一个configuration epoch，可以理解为配置版本号。如果领头哨兵主从切换失败了，那么其他哨兵会等待<code>failover-timeout</code>时间然后接替继续执行切换，每次接替都会重新获取一个configuration epoch，作为新的配置版本号。如果领头哨兵切换成功，那么其他哨兵会根据自己的配置版本号来更新对应Slave节点的Master节点配置。</p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>为什么说哨兵最少要3个节点，举个例子：</p><blockquote><p>如果是2个节点，{QUORUM}值为1，此时其中一台服务器出现客观宕机。领头哨兵需要进行主从切换，在进行主从切换前需要获取{MAJORITY}数量的哨兵同意，该{MAJORITY}参数最小的值是：2，此时领头哨兵无法进行主从切换。</p><p><a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">https://redis.io/topics/sentinel</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在这篇来学习一下Redis Sentinel即哨兵策略的相关知识。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是哨兵？&quot;&gt;&lt;a href=&quot;#1-什么是哨兵？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是哨兵？&quot;&gt;&lt;/a&gt;1.什么是哨兵？&lt;/h3&gt;&lt;p&gt;哨兵（Sentinel），Redis2.6版本（正式版本是2.8，现2.6版本已被废弃）开始提供的一种集群策略，核心思想是解决了主从复制（Replication）在Master节点故障，无法自动切换Slave节点为新Master节点的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哨兵策略是分布式部署，节点间相互协调工作。&lt;/li&gt;
&lt;li&gt;哨兵集群至少要3个节点。&lt;/li&gt;
&lt;li&gt;可以把哨兵看作是一种特殊的Redis服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哨兵策略拥有主从复制的优点。&lt;/li&gt;
&lt;li&gt;哨兵策略解决了Master节点故障，无法自动切换Slave节点为新Master节点的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="redis" scheme="http://xupin.im/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记 - 主从复制</title>
    <link href="http://xupin.im/2020/03/25/redis-replication/"/>
    <id>http://xupin.im/2020/03/25/redis-replication/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.612Z</updated>
    
    <content type="html"><![CDATA[<p>Redis单点配置的情况下如果服务出现故障宕机，那么服务也就处于不可用状态，假如是生产环境那么带来的后果会有很严重，所以出现了高可用方案：集群策略。</p><h3 id="1-三种集群策略"><a href="#1-三种集群策略" class="headerlink" title="1.三种集群策略"></a>1.三种集群策略</h3><p>Redis提供了三种集群策略，它们分别是：</p><ul><li>主从复制（Replication）</li><li>哨兵（Sentinel）</li><li>集群（Cluster）</li></ul><p>这三种策略会逐一学习，本篇主要学习策略之一主从复制（Replication）。</p><h3 id="2-主从复制的概念"><a href="#2-主从复制的概念" class="headerlink" title="2.主从复制的概念"></a>2.主从复制的概念</h3><p>在主从复制（Replication）策略中，服务分为两类：Master节点、Slave节点。</p><ul><li><p>特点</p><ol><li>Master节点可以拥有多个Slave节点，但Slave节点只能服务一个Master节点。</li><li>数据复制方向只能是Master节点-&gt;Slave节点。</li></ol></li><li><p>优点</p><ol><li>实现了多机热数据备份，提高了面对宕机数据恢复的灾备能力。</li><li>在主从复制的基础上实现读写分离提高服务吞吐量，即：Master节点提供写服务，Slave节点提供读服务。</li><li>如果Master节点宕机可以快速切换使用Slave节点提供服务。</li></ol></li></ul><a id="more"></a><ul><li>缺点<ol><li>Master节点故障，无法自动切换Slave节点为新Master节点的问题。</li><li>Master节点写操作的压力没有得到解决。</li><li>数据存储能力还是受到单节点限制。</li></ol></li></ul><h3 id="3-如何配置（多种方式）"><a href="#3-如何配置（多种方式）" class="headerlink" title="3.如何配置（多种方式）"></a>3.如何配置（多种方式）</h3><ul><li>在Slave节点服务器redis.conf增加配置行，slaveof {MASTER_IP} {MASTER_PORT}。</li><li>启动redis-server时，./redis-server slaveof {MASTER_IP} {MASTER_PORT}。</li><li>在redis-cli命令行界面输入，slaveof {MASTER_IP} {MASTER_PORT}。</li></ul><h3 id="4-工作机制"><a href="#4-工作机制" class="headerlink" title="4.工作机制"></a>4.工作机制</h3><ol><li>Slave节点执行slaveof命令，保存Master节点信息。</li><li>节点内部的定时任务发现主节点信息，开始尝试Socket连接主节点。</li><li>连接建立成功，Slave节点发送ping命令，期望得到pong命令响应，否则发起重连。</li><li>如果主节点有设置auth，那么进行auth验证，成功继续，失败终止。（非必须，根据Master节点是否配置auth决定）</li><li>Slave节点同步Master节点全量数据集。（该操作是Master节点向Slave节点发送数据哟）</li><li>Master节点持续把写命令同步Slave节点。</li></ol><h3 id="5-同步命令"><a href="#5-同步命令" class="headerlink" title="5.同步命令"></a>5.同步命令</h3><p>Redis主从复制数据有两个命令，sync和psync，sync是Redis2.8版本之前的同步方法，psync是Redis2.8版本以后优化sync新设计同步方法。在这会着重学习psync，也会捎带说一下为什么sync会被优化。</p><p>首先，psync需要3个参数支持：</p><ul><li><p>Master节点和Slave节点复制数据的偏移量。</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Master</span>节点和<span class="literal">Slave</span>节点复制数据的偏移量，主要作用是通过对比复制偏移量，来判断<span class="literal">Master</span>节点和<span class="literal">Slave</span>节点数据是否一致。</span><br></pre></td></tr></table></figure></li><li><p>Master节点复制积压缓冲区。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psync的特性之一，用于增量数据复制和补救丢失的复制数据。</span><br></pre></td></tr></table></figure></li><li><p>Master节点的RunID（Replication ID）。</p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis服务启动的时，都会生成一个<span class="number">40</span>位的唯一RunID。</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Master节点和Slave节点复制数据的偏移量：每个参与复制数据的节点都会维护一份复制偏移量，Master节点在处理完写命令后，会把命令的字节长度进行累加，Slave节点每秒钟会向Master节点上报自己的复制偏移量，因此Master节点也会记录Slave节点的偏移量。Master节点持续把写命令同步Slave节点，Slave节点成功接收到之后也会累加自身的偏移量。查看偏移量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;info replication</span><br><span class="line">master_repl_offset:&#123;NUM&#125; <span class="comment"># Master节点偏移量</span></span><br><span class="line">slave_repl_offset:&#123;NUM&#125; <span class="comment"># Slave节点偏移量</span></span><br></pre></td></tr></table></figure></p><p>复制积压缓冲区：复制积压缓冲区是一个保存在Master节点拥有固定长度的队列，该队列先进先出，大小受repl-backlog-size参数控制（默认：1MB），查看缓冲区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;info replication</span><br><span class="line">repl_backlog_size:&#123;NUM&#125;（byte）</span><br></pre></td></tr></table></figure></p><p>Master节点的RunID（Replication ID）：该ID主要是用来识别Redis服务节点，因为如果使用IP+PORT方式，假如Master节点重启之后修改了RDB/AOF备份文件，此时Slave节点再基于原来的复制偏移量进行复制数据是不可靠的。查看RunID：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;info server</span><br><span class="line">run_id:8d252f66c3ef89bd60a060cf8dc5cfe3d511c5e4</span><br></pre></td></tr></table></figure></p><p>psync命令使用方式<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">psync </span><span class="template-variable">&#123;RUNID&#125;</span><span class="xml"> </span><span class="template-variable">&#123;OFFSET&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="6-增量-全量复制"><a href="#6-增量-全量复制" class="headerlink" title="6.增量/全量复制"></a>6.增量/全量复制</h3><p>知道了命令如何使用，那么当Slave节点发送psync命令给Master节点之后会发生什么？流程分为全量复制和增量复制两种。</p><ul><li><p>全量复制，如果Slave节点发送的命令是：psync ? -1</p><blockquote><p>Master节点知道Slave节点要全量复制数据，返回命令则是：+fullresync {RUNID} {OFFSET}，同时Master节点会执行RDB备份并且使用复制积压缓冲区来记录此后所有的写命令。Master节点 RDB备份完成之后向Slave节点发送备份文件，同时继续缓冲写命令，在备份文件发送完毕后Master节点会向Slave节点发送缓冲区的写命令。Slave节点在收到Master节点发送的备份文件之后，会丢弃所有的旧数据，开始载入备份文件并且开始执行Master节点发送缓冲区的写命令。</p><p>值得一提的是，在Slave节点加载备份文件的时候数据处于不可靠阶段，此时可以通过参数slave-server-stale-data（yes、no）配置是否响应请求，yes响应，no则抛出“SYNC with master in progress”。</p><p>如果备份从创建到传输完毕消耗时间大于repl-timeout参数的值，Slave节点将会放弃接收备份文件并且清理已经下载的临时文件。</p></blockquote></li><li><p>增量复制，Master节点会根据{RUNID}和{OFFSET}决定返回结果。</p><blockquote><p>Master节点首先会检查{RUNID}是否与自身一致，如果不一致将会执行全量数据复制。如果一致会根据{OFFSET}参数在缓冲区查找，如果数据偏移量之后的数据存在缓冲区，返回命令：+continue，表示可以增量复制数据。如果返回命令+err，表示Master节点版本过低不支持psync命令，将会使用sync进行全量复制数据。</p></blockquote></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最后学习一下为什么sync会被优化？</p><blockquote><p>使用sync命令，在网络或者其他不可抗力因素导致Master节点和Slave节点断开连接，需要重新进行一次全量数据复制，Slave节点数据恢复成本极高。</p><p><a href="https://redis.io/topics/replication" target="_blank" rel="noopener">https://redis.io/topics/replication</a></p><p><a href="http://try.redis.io" target="_blank" rel="noopener">http://try.redis.io</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis单点配置的情况下如果服务出现故障宕机，那么服务也就处于不可用状态，假如是生产环境那么带来的后果会有很严重，所以出现了高可用方案：集群策略。&lt;/p&gt;
&lt;h3 id=&quot;1-三种集群策略&quot;&gt;&lt;a href=&quot;#1-三种集群策略&quot; class=&quot;headerlink&quot; title=&quot;1.三种集群策略&quot;&gt;&lt;/a&gt;1.三种集群策略&lt;/h3&gt;&lt;p&gt;Redis提供了三种集群策略，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从复制（Replication）&lt;/li&gt;
&lt;li&gt;哨兵（Sentinel）&lt;/li&gt;
&lt;li&gt;集群（Cluster）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三种策略会逐一学习，本篇主要学习策略之一主从复制（Replication）。&lt;/p&gt;
&lt;h3 id=&quot;2-主从复制的概念&quot;&gt;&lt;a href=&quot;#2-主从复制的概念&quot; class=&quot;headerlink&quot; title=&quot;2.主从复制的概念&quot;&gt;&lt;/a&gt;2.主从复制的概念&lt;/h3&gt;&lt;p&gt;在主从复制（Replication）策略中，服务分为两类：Master节点、Slave节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Master节点可以拥有多个Slave节点，但Slave节点只能服务一个Master节点。&lt;/li&gt;
&lt;li&gt;数据复制方向只能是Master节点-&amp;gt;Slave节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现了多机热数据备份，提高了面对宕机数据恢复的灾备能力。&lt;/li&gt;
&lt;li&gt;在主从复制的基础上实现读写分离提高服务吞吐量，即：Master节点提供写服务，Slave节点提供读服务。&lt;/li&gt;
&lt;li&gt;如果Master节点宕机可以快速切换使用Slave节点提供服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="redis" scheme="http://xupin.im/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 分片和分区</title>
    <link href="http://xupin.im/2020/03/23/mysql-sharding-partition/"/>
    <id>http://xupin.im/2020/03/23/mysql-sharding-partition/</id>
    <published>2020-03-22T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.610Z</updated>
    
    <content type="html"><![CDATA[<p>之前在复习Mysql主从知识的同时，小伙伴考了我一个问题，分片和分区有什么差别 … 乍一听可能只是名词上的不同，但其实它们俩的确不是同一个东西。</p><h3 id="1-什么是分片（Sharding）？"><a href="#1-什么是分片（Sharding）？" class="headerlink" title="1.什么是分片（Sharding）？"></a>1.什么是分片（Sharding）？</h3><p>我们举个例子，一张文章表。<br>结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mark`</span>.<span class="string">`article`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'类型'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'标题'</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'内容'</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'作者'</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日期'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>需求如下：</p><ol><li>用户打开app会直接展示文章列表（类型，标题，作者，日期）</li><li>点击文章查看详情</li></ol><p>那么这张表在数据量比较小的初期应对访问是没什么问题的。但是随着数据量日益膨胀，查询效率会越来越低，因为里面<code>content</code>字段非常巨大。</p><p>这时候要怎么优化呢？把<code>content</code>字段拆出去，因为访问最多的请求并不需要<code>content</code>，怎么拆呢？结构如下：</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mark`</span>.<span class="string">`article`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'类型'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'标题'</span>,</span><br><span class="line">  <span class="string">`c_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'文章ID'</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'作者'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日期'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 文章内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mark`</span>.<span class="string">`article_content`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'内容'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日期'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-垂直（纵向）切分"><a href="#2-垂直（纵向）切分" class="headerlink" title="2.垂直（纵向）切分"></a>2.垂直（纵向）切分</h3><p>上述这种情况就是分片的一种，<code>垂直切分</code>也被称为<code>纵向切分</code>，这种分片的方式不仅可以跨表也可以跨库。</p><p>优点</p><ol><li>拆分规则简单。</li><li>数据模块清晰。</li><li>容易维护，容易定位问题。</li></ol><p>缺点</p><ol><li>如果分片表跨库，那么在SQL层无法进行连表查询，只能在程序层处理。</li><li>事务处理复杂度变高。</li><li>后期表结构的扩展性受限。</li></ol><h3 id="3-水平（横向）切分"><a href="#3-水平（横向）切分" class="headerlink" title="3.水平（横向）切分"></a>3.水平（横向）切分</h3><p>说到了垂直切分，那就不得不提一下<code>水平切分</code>也被称之为<code>横向切分</code>。<br>同样举个例子，一张用户日志表。<br>结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mark`</span>.<span class="string">`user_log`</span>  (</span><br><span class="line">  <span class="string">`u_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日志内容'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建日期'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>需求如下：</p><ol><li>根据用户ID快速检索日志信息</li></ol><p>情况一样，在数据量比较小的时候功能响应速度应该还可以，但是随着数据量增长的比较厉害。查询效率会呈断崖式下降。</p><p>那么这时候要怎么优化呢？我们按照用户ID去拆分表，即每个用户存储的日志固定在一张表。结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mark`</span>.<span class="string">`user_log_&#123;NUM&#125;`</span>  (</span><br><span class="line">  <span class="string">`u_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日志内容'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建日期'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>为了省事，后面{NUM}是个数字哈，每个用户进来我们会利用摘要算法（比如：crc32）取个固定数值，然后固定把对应的数据存储到相应的表内。</p><p>优点</p><ol><li>不会出现跨库无法连表查询的情况。</li><li>事务处理相对简单。</li><li>很难出现扩展性受限的问题。</li></ol><p>缺点</p><ol><li>数据分布不平均，可能一张表10W行，另外一张100W行。</li><li>难维护，定位问题需要前置算法查询。</li><li>后期数据迁移比较麻烦。</li></ol><h3 id="4-什么是分区（Partition）？"><a href="#4-什么是分区（Partition）？" class="headerlink" title="4.什么是分区（Partition）？"></a>4.什么是分区（Partition）？</h3><p>分片简单说了说，那么接下来要学习一下分区。分区和分片比较明显的一点是：分片多是利用程序配合来实现，分区则是数据库（不仅仅是Mysql，其它数据库也有）提供的机制。</p><p>首先，分区分为4种模式：</p><ul><li>Range</li><li>List</li><li>Hash</li><li>Key</li></ul><h3 id="5-Range"><a href="#5-Range" class="headerlink" title="5.Range"></a>5.Range</h3><p>Range（范围）大概的思想是将数据进行分段，比如按照日期将内购表进行拆分，分为不同的年份。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase (<span class="keyword">id</span> <span class="built_in">INT</span>, app_id <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>), money <span class="built_in">NUMERIC</span>(<span class="number">20</span>,<span class="number">4</span>),currency <span class="built_in">VARCHAR</span>(<span class="number">10</span>),created_at <span class="built_in">DATE</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>( <span class="keyword">YEAR</span>(created_at) ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1990</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1995</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2000</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2005</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2010</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2015</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 也可以按照金额来进行分区。</span></span><br><span class="line"><span class="comment"># PARTITION BY RANGE( money ) ();</span></span><br></pre></td></tr></table></figure><p>写入以下数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> purchase(app_id,<span class="keyword">name</span>,money,currency,created_at) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">600001</span>,<span class="string">'desk organiser'</span>,<span class="number">6.0000</span>,<span class="string">'CNY'</span>,<span class="string">'2003-10-15'</span>),</span><br><span class="line">(<span class="number">600001</span>,<span class="string">'alarm clock'</span>,<span class="number">12.0000</span>,<span class="string">'CNY'</span>,<span class="string">'1997-11-05'</span>),</span><br><span class="line">(<span class="number">600002</span>,<span class="string">'chair'</span>,<span class="number">30.0000</span>,<span class="string">'CNY'</span>,<span class="string">'2009-03-10'</span>),</span><br><span class="line">(<span class="number">600002</span>,<span class="string">'bookcase'</span>,<span class="number">68.0000</span>,<span class="string">'CNY'</span>,<span class="string">'1989-01-10'</span>),</span><br><span class="line">(<span class="number">600002</span>,<span class="string">'exercise bike'</span>,<span class="number">128.0000</span>,<span class="string">'CNY'</span>,<span class="string">'2014-05-09'</span>),</span><br><span class="line">(<span class="number">600003</span>,<span class="string">'sofa'</span>,<span class="number">258.0000</span>,<span class="string">'CNY'</span>,<span class="string">'1987-06-05'</span>),</span><br><span class="line">(<span class="number">600003</span>,<span class="string">'espresso maker'</span>,<span class="number">648.0000</span>,<span class="string">'CNY'</span>,<span class="string">'2011-11-22'</span>),</span><br><span class="line">(<span class="number">600004</span>,<span class="string">'aquarium'</span>,<span class="number">99.0000</span>,<span class="string">'USD'</span>,<span class="string">'1992-08-04'</span>),</span><br><span class="line">(<span class="number">600005</span>,<span class="string">'study desk'</span>,<span class="number">129.0000</span>,<span class="string">'USD'</span>,<span class="string">'2006-09-16'</span>),</span><br><span class="line">(<span class="number">600006</span>,<span class="string">'lava lamp'</span>,<span class="number">299.0000</span>,<span class="string">'USD'</span>,<span class="string">'1998-12-25'</span>);</span><br></pre></td></tr></table></figure></p><p>然后我们观察一下，可能通过肉眼看没什么变化，执行这条查看分区状态的SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">partition_name part,</span><br><span class="line">partition_expression expr,</span><br><span class="line">table_rows </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">information_schema.PARTITIONS </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">table_schema = <span class="keyword">SCHEMA</span> () </span><br><span class="line"><span class="keyword">AND</span> table_name = <span class="string">'&#123;TABLE&#125;'</span>;</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line">part    |   expr              |   descr |   table_rows</span><br><span class="line">p0      |   YEAR(created_at)  |   1990  |   2</span><br><span class="line">p1      |   YEAR(created_at)  |   1995  |   1</span><br><span class="line">p2      |   YEAR(created_at)  |   2000  |   2</span><br><span class="line">p3      |   YEAR(created_at)  |   2005  |   1</span><br><span class="line">p4      |   YEAR(created_at)  |   2010  |   2</span><br><span class="line">p5      |   YEAR(created_at)  |   2015  |   2</span><br></pre></td></tr></table></figure></p><p>很明显，数据分别按照规则写进了分区表p0 ~ p5。</p><h3 id="6-List"><a href="#6-List" class="headerlink" title="6.List"></a>6.List</h3><p>List（列表）模式，多用于对于指定字段的数值进行明确的数据拆分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase (<span class="keyword">id</span> <span class="built_in">INT</span>, app_id <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>), money <span class="built_in">NUMERIC</span>(<span class="number">20</span>,<span class="number">4</span>),currency <span class="built_in">VARCHAR</span>(<span class="number">10</span>),created_at <span class="built_in">DATE</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">LIST</span>( app_id ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">600001</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">600002</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">600003</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">600004</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">600005</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">600006</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>写入同样的数据，之后执行查看分区状态的SQL。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">part    |   expr    |   descr   |   table_rows</span><br><span class="line">p0      |   app_id  |   600001  |   2</span><br><span class="line">p1      |   app_id  |   600002  |   3</span><br><span class="line">p2      |   app_id  |   600003  |   2</span><br><span class="line">p3      |   app_id  |   600004  |   1</span><br><span class="line">p4      |   app_id  |   600005  |   1</span><br><span class="line">p5      |   app_id  |   600006  |   1</span><br></pre></td></tr></table></figure></p><h3 id="7-Hash"><a href="#7-Hash" class="headerlink" title="7.Hash"></a>7.Hash</h3><p>Hash（哈希）模式通过对一个或多个字段进行Hash计算，通过这个Hash值来进行分区（是不是感觉很像分片，其实分片的思想就是根据分区衍生而来）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase (<span class="keyword">id</span> <span class="built_in">INT</span>, app_id <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>), money <span class="built_in">NUMERIC</span>(<span class="number">20</span>,<span class="number">4</span>),currency <span class="built_in">VARCHAR</span>(<span class="number">10</span>),created_at <span class="built_in">DATE</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span>( <span class="keyword">YEAR</span>(created_at) )</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">4</span>; <span class="comment"># 为了区别，设4个分区。</span></span><br></pre></td></tr></table></figure><p>然后写入同样的数据，之后执行查看分区状态的SQL。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">part|   expr              |  descr |   table_rows</span><br><span class="line">p0  |   YEAR(created_at)  |  NULL  |   1</span><br><span class="line">p1  |   YEAR(created_at)  |  NULL  |   3</span><br><span class="line">p2  |   YEAR(created_at)  |  NULL  |   3</span><br><span class="line">p3  |   YEAR(created_at)  |  NULL  |   3</span><br></pre></td></tr></table></figure></p><h3 id="8-Key"><a href="#8-Key" class="headerlink" title="8.Key"></a>8.Key</h3><p>Key（键）模式和Hash模式极其相似，可能有一点区别就是，Hash模式下是用户自定义规则进行Hash计算，而Key模式是Mysql使用自己的函数进行Hash计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase (<span class="keyword">id</span> <span class="built_in">INT</span>, app_id <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>), money <span class="built_in">NUMERIC</span>(<span class="number">20</span>,<span class="number">4</span>),currency <span class="built_in">VARCHAR</span>(<span class="number">10</span>),created_at <span class="built_in">DATE</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">KEY</span>( created_at )</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">3</span>; <span class="comment"># 为了区别，设3个分区。</span></span><br></pre></td></tr></table></figure><p>重复步骤，写入同样的数据，之后执行查看分区状态的SQL。<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">part|   <span class="type">expr</span>          |  <span class="type">descr</span> |   <span class="type">table_rows</span></span><br><span class="line">p0  |   <span class="type">`created_at</span>`  |  <span class="type">NULL</span>  |   <span class="type">2</span></span><br><span class="line">p1  |   <span class="type">`created_at</span>`  |  <span class="type">NULL</span>  |   <span class="type">3</span></span><br><span class="line">p2  |   <span class="type">`created_at</span>`  |  <span class="type">NULL</span>  |   <span class="type">5</span></span><br></pre></td></tr></table></figure></p><p>Key模式和Hash模式在<code>expr</code>上面有了直观的不同表现，Hash模式是：YEAR(created_at)，而Key模式是：created_at。这就是我们前面提到的Hash计算方式的区别。</p><h3 id="9-最后"><a href="#9-最后" class="headerlink" title="9.最后"></a>9.最后</h3><p>其实Mysql分区还有第5种模式，叫做Composite（复合）模式，比如：Range - Key<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase (<span class="keyword">id</span> <span class="built_in">INT</span>, app_id <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>), money <span class="built_in">NUMERIC</span>(<span class="number">20</span>,<span class="number">4</span>),currency <span class="built_in">VARCHAR</span>(<span class="number">10</span>),created_at <span class="built_in">DATE</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>( <span class="keyword">YEAR</span>( created_at ) ) </span><br><span class="line"><span class="keyword">SUBPARTITION</span> <span class="keyword">BY</span> <span class="keyword">KEY</span>( created_at )</span><br><span class="line"><span class="keyword">SUBPARTITIONS</span> <span class="number">3</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1990</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1995</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2000</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2005</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2010</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">2015</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>这里就不展开Composite（复合）模式的学习了，最后通过以上的例子，可以看出分区也是有垂直分区和水平分区的说法的。</p><blockquote><p><a href="https://dev.mysql.com/doc/mysql-partitioning-excerpt/5.7/en/partitioning-management.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-partitioning-excerpt/5.7/en/partitioning-management.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在复习Mysql主从知识的同时，小伙伴考了我一个问题，分片和分区有什么差别 … 乍一听可能只是名词上的不同，但其实它们俩的确不是同一个东西。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是分片（Sharding）？&quot;&gt;&lt;a href=&quot;#1-什么是分片（Sharding）？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是分片（Sharding）？&quot;&gt;&lt;/a&gt;1.什么是分片（Sharding）？&lt;/h3&gt;&lt;p&gt;我们举个例子，一张文章表。&lt;br&gt;结构如下：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`mark`&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;`article`&lt;/span&gt;  (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`type`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;类型&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;标题&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`content`&lt;/span&gt; longtext &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;内容&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`author`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;作者&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`date`&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;日期&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户打开app会直接展示文章列表（类型，标题，作者，日期）&lt;/li&gt;
&lt;li&gt;点击文章查看详情&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么这张表在数据量比较小的初期应对访问是没什么问题的。但是随着数据量日益膨胀，查询效率会越来越低，因为里面&lt;code&gt;content&lt;/code&gt;字段非常巨大。&lt;/p&gt;
&lt;p&gt;这时候要怎么优化呢？把&lt;code&gt;content&lt;/code&gt;字段拆出去，因为访问最多的请求并不需要&lt;code&gt;content&lt;/code&gt;，怎么拆呢？结构如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 刷脏机制</title>
    <link href="http://xupin.im/2020/03/21/mysql-checkpoint/"/>
    <id>http://xupin.im/2020/03/21/mysql-checkpoint/</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.609Z</updated>
    
    <content type="html"><![CDATA[<p>之前学习了LRU算法和Mysql缓冲池使用的LRU变体算法，其中有个共同点就是当LRU链表写满以后如果再有新数据进来会淘汰尾部的数据，那么Mysql淘汰这些尾部数据的时候是否会进行什么操作呢？这就是我们在最后提到了一个参数<code>Modified db pages</code>，即脏页。</p><h3 id="1-什么是脏页？"><a href="#1-什么是脏页？" class="headerlink" title="1.什么是脏页？"></a>1.什么是脏页？</h3><ul><li>脏页，这个名词很抽象从字面意思去看可能很不解，脏页是当内存中的数据页和磁盘中的数据页内容不一致时，这个数据页称之为脏页。因为从操作系统的角度来讲，自己读入的数据被外部所修改等于被污染，所以叫脏页。</li><li>当内存中的数据页和磁盘中的数据页数据一致，叫干净页。</li></ul><h3 id="2-脏页什么时候会刷新？"><a href="#2-脏页什么时候会刷新？" class="headerlink" title="2.脏页什么时候会刷新？"></a>2.脏页什么时候会刷新？</h3><ol><li>缓冲池（buffer pool）空间不足，也就是LRU链表写满时，新数据进来时淘汰掉的尾部数据脏页。</li><li>redo log不可用时，需要强制将脏页列表中的一些数据页刷入磁盘。</li><li>Mysql在服务器负载较小时，会主动进行刷脏操作。</li><li>Mysql服务正常关闭，会刷新所有脏页。</li></ol><h3 id="3-什么是redo-log？"><a href="#3-什么是redo-log？" class="headerlink" title="3.什么是redo log？"></a>3.什么是redo log？</h3><p>InnoDB中两块非常重要的日志，一个是undo log，另外一个就是我们接下来要学习的redo log。前者用来保证事务的原子性以及InnoDB的MVCC（Mutil-Version Concurrency Control），后者用来保证事务的持久性。</p><p>那么什么时候写redo log呢？当数据库对数据做修改的时候，需要把数据页从磁盘读到缓冲池中，然后在缓冲池中进行修改。但是InnoDB采用的是WAL（Write Ahead Log）策略来防止数据丢失，也就是事务提交时，先写redo log才会再去修改内存数据页。</p><p>redo log的文件名默认以ib_logfile{NUM}，存储在my.cnf中datadir目录下面，受以下两个参数控制</p><ul><li>innodb_log_file_size，日志大小</li><li>innodb_log_files_in_group，日志个数，默认是2个。</li></ul><p>所以redo log的大小等于innodb_log_files_in_group*innodb_log_file_size。</p><p>既然redo log会产生，那么什么时候会被覆盖呢？redo log被设计成可循环使用，当日志文件写满时那些已经被刷入磁盘中的数据就可以被覆盖啦。</p><blockquote><p>WAL（Write Ahead Log），是关系数据库系统中用于提供原子性和持久性（ACID属性中的两个）的一系列技术，ARIES是WAL系列技术常用的算法，在文件系统中WAL通常称为journaling。WAL的主要思想是将元数据的实时变更操作写入日志文件中，然后在系统负载较小时再把日志刷入磁盘。主要是为了减少磁盘的IO操作，此处就不展开学习了。先Mark一下</p></blockquote><a id="more"></a><h3 id="4-Checkpoint"><a href="#4-Checkpoint" class="headerlink" title="4.Checkpoint"></a>4.Checkpoint</h3><p>Checkpoint（检查点），在数据库中一般是用来把redo log脏页刷入磁盘的一个操作，通过LSN保存记录，作用是当发生宕机等crash情况时，再次启动时会查询Checkpoint，在该Checkpoint之后发生的事务修改恢复到磁盘。通俗来解释，就像我们玩一些游戏每过不久就会存一次档，然后如果游戏客户端不幸crash重新进入最近的一次存档即可，同理。</p><p>Checkpoint存在的目的：</p><ol><li>缩短恢复数据时间。</li><li>缓冲池写满时，淘汰脏页刷入磁盘。</li><li>redo log写满时，进行刷脏操作。</li></ol><p>那么怎么查看我们的检查点呢？可以使用命令show engine innodb status来查看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;show engine innodb status\G;</span><br><span class="line">---</span><br><span class="line">LOG</span><br><span class="line">---</span><br><span class="line">Log sequence number 1597945</span><br><span class="line">Log flushed up to   1597945</span><br><span class="line">Last Checkpoint at  1597945</span><br><span class="line">Max Checkpoint age    7782360</span><br><span class="line">Checkpoint age target 7539162</span><br><span class="line">Modified age          0</span><br><span class="line">Checkpoint age        0</span><br><span class="line">0 pending <span class="built_in">log</span> writes, 0 pending chkp writes</span><br><span class="line">8 <span class="built_in">log</span> i/o<span class="string">'s done, 0.42 log i/o'</span>s/second</span><br></pre></td></tr></table></figure></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Log</span> sequence number     <span class="string">|   当前系统LSN最大值，新的日志LSN将在此基础上生成（LSN+新日志的大小）。</span></span><br><span class="line"><span class="built_in">Log</span> flushed up to       <span class="string">|   当前已经写入日志文件的LSN。</span></span><br><span class="line">Last Checkpoint at      <span class="string">|   当前已经写入Checkpoint的LSN。</span></span><br><span class="line">Max Checkpoint age      <span class="string">|   Percona的XtraDB参数，此处不过多解释。</span></span><br><span class="line">Checkpoint age target   <span class="string">|   同上。</span></span><br></pre></td></tr></table></figure><blockquote><p>LSN（Log Sequence Number），LSN是日志空间中每条日志的结束点，用字节偏移量来表示。每个数据页有LSN，redo log也有LSN，Checkpoint亦有LSN。该LSN记录当前数据页最后一次修改的LSN号，用于在恢复数据时对比重做日志LSN号决定是否对该数据页进行恢复数据。可以通俗理解为，存档编号。</p></blockquote><h3 id="5-Checkpoint什么时候会触发？"><a href="#5-Checkpoint什么时候会触发？" class="headerlink" title="5.Checkpoint什么时候会触发？"></a>5.Checkpoint什么时候会触发？</h3><p>InnoDB存储引擎有两种Checkpoint，分别是：</p><ul><li>Sharp Checkpoint</li><li>Fuzzy Checkpoint</li></ul><p>Sharp Checkpoint发生在数据库服务关闭时，将所有脏页刷入磁盘，此时innodb_fast_shutdown参数的值为1（innodb_fast_shutdown参数的值：0、1、2），这是默认机制。但是考虑到如果数据库在使用时也执行这种机制，数据库的性能会受到影响，所以Fuzzy Checkpoint刷新部分脏页的这种机制产生了。</p><p>Fuzzy Checkpoint刷新部分脏页，也分为以下几种方式：</p><ul><li>Master Thread Checkpoint</li><li>FLUSH_LRU_LIST Checkpoint</li><li>Dirty Page too much Checkpoint</li><li>Async/Sync Flush Checkpoint</li></ul><p>Master Thread Checkpoint</p><blockquote><p>主线程以每秒或者每十秒从缓冲池的脏页列表（Flush List）刷新一定比例的数据页回磁盘，这个操作过程是异步的不会阻塞线程。</p></blockquote><p>FLUSH_LRU_LIST Checkpoint</p><blockquote><p>InnoDB需要保证LRU链表中有足够空闲页可以使用，在InnoDB1.1.x版本前，如果LRU链表写满有新的数据进来如果淘汰尾部脏页，会触发Checkpoint机制强制进行刷脏操作。该操作是阻塞线程的，所以在InnoDB1.2.x版本开始，这个操作放到Page Cleaner Thread来处理，每次刷新LRU链表脏页的数量受innodb_lru_scan_depth参数控制（默认：1024）。</p></blockquote><p>Dirty Page too much Checkpoint</p><blockquote><p>当LRU链表中脏页数量过多时（比例），InnoDB为了保证缓冲池中有足够多的空闲页可以使用，会强制触发Checkpoint机制进行刷脏操作。此值受innodb_max_dirty_pages_pct参数控制（默认：75%）。</p></blockquote><p>Async/Sync Flush Checkpoint</p><blockquote><p>为了保证redo log循环使用的可重用性，在redo log不可用时会强制触发Checkpoint刷脏操作。在InnoDB1.2.x版本以前，Async Flush Checkpoint会阻塞当前查询线程，Sync Flush Checkpoint会阻塞所有查询线程。InnoDB1.2.X之后放到单独的Page Cleaner Thread来处理。</p></blockquote><h3 id="6-最后"><a href="#6-最后" class="headerlink" title="6.最后"></a>6.最后</h3><p>关于Async/Sync Flush Checkpoint刷脏方式的原理有些复杂，这里先Mark一下，暂时不展开学习了。</p><p><code>前面说到的Percona XtraDB</code></p><blockquote><p><a href="https://www.percona.com/doc/percona-server/8.0/scalability/innodb_io.html" target="_blank" rel="noopener">https://www.percona.com/doc/percona-server/8.0/scalability/innodb_io.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前学习了LRU算法和Mysql缓冲池使用的LRU变体算法，其中有个共同点就是当LRU链表写满以后如果再有新数据进来会淘汰尾部的数据，那么Mysql淘汰这些尾部数据的时候是否会进行什么操作呢？这就是我们在最后提到了一个参数&lt;code&gt;Modified db pages&lt;/code&gt;，即脏页。&lt;/p&gt;
&lt;h3 id=&quot;1-什么是脏页？&quot;&gt;&lt;a href=&quot;#1-什么是脏页？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是脏页？&quot;&gt;&lt;/a&gt;1.什么是脏页？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;脏页，这个名词很抽象从字面意思去看可能很不解，脏页是当内存中的数据页和磁盘中的数据页内容不一致时，这个数据页称之为脏页。因为从操作系统的角度来讲，自己读入的数据被外部所修改等于被污染，所以叫脏页。&lt;/li&gt;
&lt;li&gt;当内存中的数据页和磁盘中的数据页数据一致，叫干净页。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-脏页什么时候会刷新？&quot;&gt;&lt;a href=&quot;#2-脏页什么时候会刷新？&quot; class=&quot;headerlink&quot; title=&quot;2.脏页什么时候会刷新？&quot;&gt;&lt;/a&gt;2.脏页什么时候会刷新？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;缓冲池（buffer pool）空间不足，也就是LRU链表写满时，新数据进来时淘汰掉的尾部数据脏页。&lt;/li&gt;
&lt;li&gt;redo log不可用时，需要强制将脏页列表中的一些数据页刷入磁盘。&lt;/li&gt;
&lt;li&gt;Mysql在服务器负载较小时，会主动进行刷脏操作。&lt;/li&gt;
&lt;li&gt;Mysql服务正常关闭，会刷新所有脏页。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-什么是redo-log？&quot;&gt;&lt;a href=&quot;#3-什么是redo-log？&quot; class=&quot;headerlink&quot; title=&quot;3.什么是redo log？&quot;&gt;&lt;/a&gt;3.什么是redo log？&lt;/h3&gt;&lt;p&gt;InnoDB中两块非常重要的日志，一个是undo log，另外一个就是我们接下来要学习的redo log。前者用来保证事务的原子性以及InnoDB的MVCC（Mutil-Version Concurrency Control），后者用来保证事务的持久性。&lt;/p&gt;
&lt;p&gt;那么什么时候写redo log呢？当数据库对数据做修改的时候，需要把数据页从磁盘读到缓冲池中，然后在缓冲池中进行修改。但是InnoDB采用的是WAL（Write Ahead Log）策略来防止数据丢失，也就是事务提交时，先写redo log才会再去修改内存数据页。&lt;/p&gt;
&lt;p&gt;redo log的文件名默认以ib_logfile{NUM}，存储在my.cnf中datadir目录下面，受以下两个参数控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;innodb_log_file_size，日志大小&lt;/li&gt;
&lt;li&gt;innodb_log_files_in_group，日志个数，默认是2个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以redo log的大小等于innodb_log_files_in_group*innodb_log_file_size。&lt;/p&gt;
&lt;p&gt;既然redo log会产生，那么什么时候会被覆盖呢？redo log被设计成可循环使用，当日志文件写满时那些已经被刷入磁盘中的数据就可以被覆盖啦。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WAL（Write Ahead Log），是关系数据库系统中用于提供原子性和持久性（ACID属性中的两个）的一系列技术，ARIES是WAL系列技术常用的算法，在文件系统中WAL通常称为journaling。WAL的主要思想是将元数据的实时变更操作写入日志文件中，然后在系统负载较小时再把日志刷入磁盘。主要是为了减少磁盘的IO操作，此处就不展开学习了。先Mark一下&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记 - 文件分片上传</title>
    <link href="http://xupin.im/2020/03/19/laravel-chunk-upload/"/>
    <id>http://xupin.im/2020/03/19/laravel-chunk-upload/</id>
    <published>2020-03-18T16:00:00.000Z</published>
    <updated>2021-11-18T07:23:28.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是分片上传？"><a href="#1-什么是分片上传？" class="headerlink" title="1.什么是分片上传？"></a>1.什么是分片上传？</h3><ul><li>如果我们上传的文件是一个很大的文件，那么上传的时间应该会比较久，再加上网络不稳定各种因素的影响，很容易导致传输中断。</li><li>服务端一般都会设置固定大小的接收BUFF，往往上传文件的体积是该值的几何倍数。</li></ul><p>分片上传的原理大致可以描述为，把一个较大文件分成若干份的分片一个一个传输，服务端在接收到最后一个分片后进行合并资源。</p><h3 id="2-前端"><a href="#2-前端" class="headerlink" title="2.前端"></a>2.前端</h3><p>前端使用Dropzone控件，DropzoneJS是一个开源库，提供带有图像预览的拖放文件上传并且有分割文件分片上传的机制，当然该控件不仅仅可以上传图片，经测试视频，Word等文件一样可以。</p><p>Dropzone官网提供了一个<a href="https://gitlab.com/meno/dropzone/raw/master/website/examples/simple.html" target="_blank" rel="noopener">simple.html</a>的上传demo（js、css文件路径有改动过），内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Dropzone simple example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  DO NOT SIMPLY COPY THOSE LINES. Download the JS and CSS files from the</span></span><br><span class="line"><span class="comment">  latest release (https://github.com/enyo/dropzone/releases/latest), and</span></span><br><span class="line"><span class="comment">  host them yourself!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dropzone.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./dropzone.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  This is the most minimal example of Dropzone. The upload in this example</span><br><span class="line">  doesn't work, because there is no actual server to handle the file upload.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Change /upload-target to your upload address --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"api/upload"</span> <span class="attr">class</span>=<span class="string">"dropzone"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Dropzone官方提供的demo默认是没有开启分片上传的，需要修改dropzone.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Whether you want files to be uploaded in chunks to your server. This can't be</span></span><br><span class="line"><span class="comment"> * used in combination with `uploadMultiple`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">chunking: <span class="literal">false</span>, <span class="comment">// 修改为true,即开启分片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If `chunking` is `true`, then this defines the chunk size in bytes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">chunkSize: <span class="number">2000000</span>, <span class="comment">// 默认分片大小，单位：Byte</span></span><br></pre></td></tr></table></figure></p><h3 id="3-后端"><a href="#3-后端" class="headerlink" title="3.后端"></a>3.后端</h3><blockquote><p>框架：Laravel 6.8<br>扩展：<a href="https://github.com/pionl/laravel-chunk-upload" target="_blank" rel="noopener">laravel-chunk-upload</a><br>代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// create the file receiver</span></span><br><span class="line">$receiver = <span class="keyword">new</span> FileReceiver(<span class="string">"file"</span>, $request, HandlerFactory::classFromRequest($request));</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if the upload is success, throw exception or return response you need</span></span><br><span class="line"><span class="keyword">if</span> ($receiver-&gt;isUploaded() === <span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UploadMissingFileException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// receive the file</span></span><br><span class="line">$save = $receiver-&gt;receive();</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if the upload has finished (in chunk mode it will send smaller files)</span></span><br><span class="line"><span class="keyword">if</span> ($save-&gt;isFinished()) &#123;</span><br><span class="line">    <span class="comment">// save the file and return any response you need, current example uses `move` function. If you are</span></span><br><span class="line">    <span class="comment">// not using move, you need to manually delete the file by unlink($save-&gt;getFile()-&gt;getPathname())</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;saveFile($save-&gt;getFile());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we are in chunk mode, lets send the current progress</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> AbstractHandler $handler */</span></span><br><span class="line">$handler = $save-&gt;handler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">    <span class="string">"done"</span> =&gt; $handler-&gt;getPercentageDone(),</span><br><span class="line">    <span class="string">'status'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="4-Demo"><a href="#4-Demo" class="headerlink" title="4.Demo"></a>4.Demo</h3><blockquote><p><a href="https://github.com/xupin/chunk-upload-example" target="_blank" rel="noopener">https://github.com/xupin/chunk-upload-example</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是分片上传？&quot;&gt;&lt;a href=&quot;#1-什么是分片上传？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是分片上传？&quot;&gt;&lt;/a&gt;1.什么是分片上传？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果我们上传的文件是一个很大的文件，那么上传的时间应该会比较久，</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="laravel" scheme="http://xupin.im/tags/laravel/"/>
    
    <category term="dropzone" scheme="http://xupin.im/tags/dropzone/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - LRU算法</title>
    <link href="http://xupin.im/2020/03/18/mysql-lru/"/>
    <id>http://xupin.im/2020/03/18/mysql-lru/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2021-11-11T08:56:41.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是LRU？"><a href="#1-什么是LRU？" class="headerlink" title="1.什么是LRU？"></a>1.什么是LRU？</h3><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“最近使用的页面数据会在未来一段时期内仍然被使用,已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用”。</p><h3 id="2-LRU的实现"><a href="#2-LRU的实现" class="headerlink" title="2.LRU的实现"></a>2.LRU的实现</h3><p>LRU算法最常见的实现是使用链表来保存数据，该链表是双向链表，然后利用先进先出的特性，最新写入的数据会最快被获取。</p><ul><li>访问不存在的数据时，缓存数据则会写入链表的头部，链表写满时会淘汰掉尾部的缓存数据。</li><li>当缓存数据被访问时，则将该缓存数据向链表头部移动。</li></ul><p><img src="/assets/lru/struct.png" alt></p><blockquote><p>优点：面对频繁访问的热点数据，查询效率高</p><p>缺点：如果一次查询扫描全表，那么LRU列表会被污染</p></blockquote><h3 id="3-Mysql-LRU算法有何不同？"><a href="#3-Mysql-LRU算法有何不同？" class="headerlink" title="3.Mysql LRU算法有何不同？"></a>3.Mysql LRU算法有何不同？</h3><p>Mysql（InnoDB）的缓冲池（buffer pool）使用了LRU算法的变体，将链表分为三个部分：young、midpoint、old。链表比例(5、3)分配给young、old。其中young占据5/8，old占据3/8，此比例受参数innodb_old_blocks_pct控制。</p><blockquote><p>young是链表中最近访问过的新子表。</p><p>old是链表中最近访问的旧子表。</p><p>midpoint是介于新子表 &amp; 旧子表的边界中间位置（也可以理解为旧子表的头部）。</p></blockquote><a id="more"></a><ul><li>数据库刚启动LRU链表为空时，此时会检查Free List中是否有空闲的数据页，如果有则从Free List中删除并且在LRU链表中写入相同的数据页。</li><li>访问不存在的数据页时，数据页不会直接写入链表的头部，而是写入中间位置，如果链表满了则会从旧子表尾部淘汰数据页。</li><li>当数据页被访问时，则判断访问数据页的时间是否大于设定innodb_old_blocks_time（默认：1000ms），如果大于则向链表头部移动，如果小于其位置不变。</li></ul><p><img src="/assets/lru/innodb-buffer-pool-list.png" alt></p><blockquote><p>改进优点：能够防止单次大量的全表扫描污染整个LRU链表。</p></blockquote><h3 id="4-Mysql-LRU相关查询命令"><a href="#4-Mysql-LRU相关查询命令" class="headerlink" title="4.Mysql LRU相关查询命令"></a>4.Mysql LRU相关查询命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;show engine innodb status\G;</span><br><span class="line">----------------------</span><br><span class="line">BUFFER POOL AND MEMORY</span><br><span class="line">----------------------</span><br><span class="line">Total memory allocated 137756672; <span class="keyword">in</span> additional pool allocated 0</span><br><span class="line">Total memory allocated by <span class="built_in">read</span> views 88</span><br><span class="line">Internal <span class="built_in">hash</span> tables (constant factor + variable factor)</span><br><span class="line">    Adaptive <span class="built_in">hash</span> index 2217584         (2213368 + 4216)</span><br><span class="line">    Page <span class="built_in">hash</span>           139112 (buffer pool 0 only)</span><br><span class="line">    Dictionary cache    593780  (554768 + 39012)</span><br><span class="line">    File system         83536   (82672 + 864)</span><br><span class="line">    Lock system         333248  (332872 + 376)</span><br><span class="line">    Recovery system     0       (0 + 0)</span><br><span class="line">Dictionary memory allocated 39012</span><br><span class="line">Buffer pool size        8191</span><br><span class="line">Buffer pool size, bytes 134201344</span><br><span class="line">Free buffers            8048</span><br><span class="line">Database pages          143</span><br><span class="line">Old database pages      0</span><br><span class="line">Modified db pages       0</span><br><span class="line">Pending reads 0</span><br><span class="line">Pending writes: LRU 0, flush list 0, single page 0</span><br><span class="line">Pages made young 0, not young 0</span><br><span class="line">0.00 youngs/s, 0.00 non-youngs/s</span><br><span class="line">Pages <span class="built_in">read</span> 143, created 0, written 0</span><br><span class="line">0.00 reads/s, 0.00 creates/s, 0.00 writes/s</span><br><span class="line">No buffer pool page gets since the last printout</span><br><span class="line">Pages <span class="built_in">read</span> ahead 0.00/s, evicted without access 0.00/s, Random <span class="built_in">read</span> ahead 0.00/s</span><br><span class="line">LRU len: 143, unzip_LRU len: 0</span><br><span class="line">I/O sum[0]:cur[0], unzip sum[0]:cur[0]</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Buffer<span class="built_in"> pool </span>size                    |   innodb_buffer_pool的大小</span><br><span class="line">Free buffers                        |   当前Free List中数据页数量</span><br><span class="line">Database pages                      |   LRU链表中数据页数量</span><br><span class="line">Old database pages                  |   LRU链表中旧子表数据页数量</span><br><span class="line">Modified db pages                   |   LRU链表中脏页数量</span><br><span class="line">Pages made young 0, <span class="keyword">not</span> young 0     |   数据页从old移至young的行为：page made young,数据页因为innodb_old_blocks_time导致没有从old移至young的行为：page <span class="keyword">not</span> young。后面的数值是该行为发生的次数。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-什么是LRU？&quot;&gt;&lt;a href=&quot;#1-什么是LRU？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是LRU？&quot;&gt;&lt;/a&gt;1.什么是LRU？&lt;/h3&gt;&lt;p&gt;LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“最近使用的页面数据会在未来一段时期内仍然被使用,已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用”。&lt;/p&gt;
&lt;h3 id=&quot;2-LRU的实现&quot;&gt;&lt;a href=&quot;#2-LRU的实现&quot; class=&quot;headerlink&quot; title=&quot;2.LRU的实现&quot;&gt;&lt;/a&gt;2.LRU的实现&lt;/h3&gt;&lt;p&gt;LRU算法最常见的实现是使用链表来保存数据，该链表是双向链表，然后利用先进先出的特性，最新写入的数据会最快被获取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问不存在的数据时，缓存数据则会写入链表的头部，链表写满时会淘汰掉尾部的缓存数据。&lt;/li&gt;
&lt;li&gt;当缓存数据被访问时，则将该缓存数据向链表头部移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/lru/struct.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优点：面对频繁访问的热点数据，查询效率高&lt;/p&gt;
&lt;p&gt;缺点：如果一次查询扫描全表，那么LRU列表会被污染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-Mysql-LRU算法有何不同？&quot;&gt;&lt;a href=&quot;#3-Mysql-LRU算法有何不同？&quot; class=&quot;headerlink&quot; title=&quot;3.Mysql LRU算法有何不同？&quot;&gt;&lt;/a&gt;3.Mysql LRU算法有何不同？&lt;/h3&gt;&lt;p&gt;Mysql（InnoDB）的缓冲池（buffer pool）使用了LRU算法的变体，将链表分为三个部分：young、midpoint、old。链表比例(5、3)分配给young、old。其中young占据5/8，old占据3/8，此比例受参数innodb_old_blocks_pct控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;young是链表中最近访问过的新子表。&lt;/p&gt;
&lt;p&gt;old是链表中最近访问的旧子表。&lt;/p&gt;
&lt;p&gt;midpoint是介于新子表 &amp;amp; 旧子表的边界中间位置（也可以理解为旧子表的头部）。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - Int长度的问题</title>
    <link href="http://xupin.im/2020/03/15/mysql-int-length/"/>
    <id>http://xupin.im/2020/03/15/mysql-int-length/</id>
    <published>2020-03-15T11:30:00.000Z</published>
    <updated>2021-11-11T08:56:41.610Z</updated>
    
    <content type="html"><![CDATA[<p>创建数据表的时候我们总是要考虑存储数据的字段该用哪种类型、多少长度比较合适，不过在Mysql中如果字段类型是Int，此时长度是不生效的。</p><h3 id="1-Int类型的长度问题"><a href="#1-Int类型的长度问题" class="headerlink" title="1.Int类型的长度问题"></a>1.Int类型的长度问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test` (</span><br><span class="line">  `id` int(3) NOT NULL,</span><br><span class="line">  `name` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>有这样一张表，<code>id</code>是Int类型长度3的字段，那么理论上是不能存储长度超过3的值，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test`(`id`, `name`) VALUES (1000000, &apos;name&apos;);</span><br></pre></td></tr></table></figure></p><p>不过结果是意外的，这条数据可以正常写入。</p><h3 id="2-Int类型的长度为什么不生效"><a href="#2-Int类型的长度为什么不生效" class="headerlink" title="2.Int类型的长度为什么不生效"></a>2.Int类型的长度为什么不生效</h3><p>翻了一下Mysql的<a href="https://dev.mysql.com/doc/refman/5.6/en/data-types.html" target="_blank" rel="noopener">数据类型文档</a>，发现这么一句话：</p><blockquote><p>对于整数类型，M表示最大显示宽度。 对于浮点和定点类型，M是可以存储的总位数（精度）。 对于字符串类型，M是最大长度。 M的最大允许值取决于数据类型。</p></blockquote><p>所以这个Int类型的“长度”其实叫宽度，也可以理解为显示长度。</p><h3 id="3-如果存储的数据长度低于显示宽度会怎样？"><a href="#3-如果存储的数据长度低于显示宽度会怎样？" class="headerlink" title="3.如果存储的数据长度低于显示宽度会怎样？"></a>3.如果存储的数据长度低于显示宽度会怎样？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test`(`id`, `name`) VALUES (1, &apos;name&apos;);</span><br></pre></td></tr></table></figure><p>当然是可以写入的，但是好像并没有什么特别的不一样，不过我们再执行一条SQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `test` MODIFY COLUMN `id` int(3) UNSIGNED ZEROFILL;</span><br></pre></td></tr></table></figure></p><p>这次数据产生变化了，变成了这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id      |   name</span><br><span class="line">001     |   name</span><br><span class="line">1000000 |   name</span><br></pre></td></tr></table></figure></p><h3 id="4-为什么要设计显示宽度？"><a href="#4-为什么要设计显示宽度？" class="headerlink" title="4.为什么要设计显示宽度？"></a>4.为什么要设计显示宽度？</h3><p>我也没有得出明确的答案，和小伙伴讨论这个问题~ta觉得是为了方便<code>排序</code>，你觉得呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建数据表的时候我们总是要考虑存储数据的字段该用哪种类型、多少长度比较合适，不过在Mysql中如果字段类型是Int，此时长度是不生效的。&lt;/p&gt;
&lt;h3 id=&quot;1-Int类型的长度问题&quot;&gt;&lt;a href=&quot;#1-Int类型的长度问题&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql int length" scheme="http://xupin.im/tags/mysql-int-length/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记 - 定时任务调度</title>
    <link href="http://xupin.im/2020/01/19/go-console/"/>
    <id>http://xupin.im/2020/01/19/go-console/</id>
    <published>2020-01-18T16:00:00.000Z</published>
    <updated>2021-11-18T07:25:43.765Z</updated>
    
    <content type="html"><![CDATA[<p>每一个任务都需要编写一个Crontab命令，这是件很麻烦且很不友好的事情。 任务调度器允许你以代码的形式定义调度命令，并且服务器上只需要一个Crontab命令即可, 任务调度又是我们俗称的 “计划任务”</p><h3 id="1-工欲善其事，必先利其器"><a href="#1-工欲善其事，必先利其器" class="headerlink" title="1.工欲善其事，必先利其器"></a>1.工欲善其事，必先利其器</h3><p>Github一番搜索，发现Golang有个cron包（<a href="https://github.com/robfig/cron" target="_blank" rel="noopener">robfig/cron</a>）大概满足需求，于是学习一下。</p><h3 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2.介绍"></a>2.介绍</h3><p>看了一遍文档，cron包支持的已经很全面了~~~不用自己造轮子了。</p><p>表达式</p><blockquote><p>兼容Linux的crontab表达式（支持分钟级别）。</p></blockquote><p>日志</p><blockquote><p>可以很详细的记录调度的任务状态</p></blockquote><p>时区</p><blockquote><p>支持任务级别的时区配置</p></blockquote><p>预定义计划</p><blockquote><p>支持在未来指定的时间去运行</p></blockquote><p><code>线程安全问题</code></p><blockquote><p>该cron lib管理任务队列的slice没有做并发安全考虑，可能会出现任务竟抢行为。</p></blockquote><a id="more"></a><h3 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/robfig/cron"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := cron.New()</span><br><span class="line">    c.AddFunc(<span class="string">"* * * * * *"</span>, test)</span><br><span class="line">    c.Start()</span><br><span class="line"></span><br><span class="line">    timer := time.NewTimer(time.Second * <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">            timer.Reset(time.Second * <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I'm a test script!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go run .</span><br><span class="line">I<span class="string">'m a test script!!!</span></span><br><span class="line"><span class="string">I'</span>m a <span class="built_in">test</span> script!!!</span><br><span class="line">I<span class="string">'m a test script!!!</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="4-简单封装"><a href="#4-简单封装" class="headerlink" title="4.简单封装"></a>4.简单封装</h3><ul><li><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"cron-example/console"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    quitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        console.Default()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    &lt;-quitChan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>console.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> console</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"cron-example/console/commands"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/robfig/cron"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">schedule</span><span class="params">(c *cron.Cron)</span></span> &#123;</span><br><span class="line">    c.AddFunc(<span class="string">"* * * * * *"</span>, commands.Test)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.Println(<span class="string">"Starting..."</span>)</span><br><span class="line"></span><br><span class="line">    c := cron.New()</span><br><span class="line">    c.Start()</span><br><span class="line"></span><br><span class="line">    schedule(c)</span><br><span class="line"></span><br><span class="line">    timer := time.NewTimer(time.Second * <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">            timer.Reset(time.Second * <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://github.com/xupin/go-cron-example" target="_blank" rel="noopener">https://github.com/xupin/go-cron-example</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;每一个任务都需要编写一个Crontab命令，这是件很麻烦且很不友好的事情。 任务调度器允许你以代码的形式定义调度命令，并且服务器上只需要一个Crontab命令即可, 任务调度又是我们俗称的 “计划任务”&lt;/p&gt;
&lt;h3 id=&quot;1-工欲善其事，必先利其器&quot;&gt;&lt;a href=&quot;#1-工欲善其事，必先利其器&quot; class=&quot;headerlink&quot; title=&quot;1.工欲善其事，必先利其器&quot;&gt;&lt;/a&gt;1.工欲善其事，必先利其器&lt;/h3&gt;&lt;p&gt;Github一番搜索，发现Golang有个cron包（&lt;a href=&quot;https://github.com/robfig/cron&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;robfig/cron&lt;/a&gt;）大概满足需求，于是学习一下。&lt;/p&gt;
&lt;h3 id=&quot;2-介绍&quot;&gt;&lt;a href=&quot;#2-介绍&quot; class=&quot;headerlink&quot; title=&quot;2.介绍&quot;&gt;&lt;/a&gt;2.介绍&lt;/h3&gt;&lt;p&gt;看了一遍文档，cron包支持的已经很全面了~~~不用自己造轮子了。&lt;/p&gt;
&lt;p&gt;表达式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兼容Linux的crontab表达式（支持分钟级别）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以很详细的记录调度的任务状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时区&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;支持任务级别的时区配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;预定义计划&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;支持在未来指定的时间去运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;线程安全问题&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该cron lib管理任务队列的slice没有做并发安全考虑，可能会出现任务竟抢行为。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="golang" scheme="http://xupin.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>PHP小知识 - aliyundb SQLSetStatement is NOT supported</title>
    <link href="http://xupin.im/2020/01/07/php-aliyundb/"/>
    <id>http://xupin.im/2020/01/07/php-aliyundb/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2021-11-18T07:25:55.520Z</updated>
    
    <content type="html"><![CDATA[<p>PHP项目在数据库迁移使用ADB（aliyundb）时发现这个问题，具体错误描述是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLSTATE[HY000]: General error: 1815 [15022, 2020010711034801025210201503151413416] statement type: class com.alibaba.fastsql.sql.ast.statement.SQLSetStatement is NOT supported! (SQL: <span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`users`</span>)</span><br></pre></td></tr></table></figure></p><p>在排查该问题的过程中，尝试了各种方式，降版本、使用原生语句等，甚至查找ADB手册和Issue还是无法解决。</p><h3 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h3><p>因为ADB兼容Mysql但是有些机制还是略有不同，阅读源码后发现比如：ADB就不能很好的支持本地预处理语句，这也是该异常的原因。</p><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p>PHP PDO链接的属性值<code>PDO::ATTR_EMULATE_PREPARES</code>需要设置为<code>true</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PDO::<span class="function"><span class="params">ATTR_EMULATE_PREPARES</span> =&gt;</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP项目在数据库迁移使用ADB（aliyundb）时发现这个问题，具体错误描述是：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="php" scheme="http://xupin.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记 - WEB框架Gin</title>
    <link href="http://xupin.im/2019/12/31/go-gin/"/>
    <id>http://xupin.im/2019/12/31/go-gin/</id>
    <published>2019-12-30T16:00:00.000Z</published>
    <updated>2021-11-18T07:25:40.871Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin</a> 是一个用 Go (Golang) 编写的 HTTP web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。</p><h3 id="1-有哪些优点"><a href="#1-有哪些优点" class="headerlink" title="1.有哪些优点"></a>1.有哪些优点</h3><blockquote><p>较高的性能（<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="noopener">Golang WEB框架比对数据</a>）</p><p>简单易用的中间件</p><p>使用了性能高可扩展的HTTP路由<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">httprouter</a></p><p>社区长期有着很高的活跃度</p><p>Github星星多（Orz）</p></blockquote><p>…等</p><a id="more"></a><h3 id="2-安装-更新"><a href="#2-安装-更新" class="headerlink" title="2.安装/更新"></a>2.安装/更新</h3><p>安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/gin-gonic/gin</span><br></pre></td></tr></table></figure></p><p>更新<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/gin-gonic/gin</span><br></pre></td></tr></table></figure></p><h3 id="3-Hello-World"><a href="#3-Hello-World" class="headerlink" title="3.Hello World"></a>3.Hello World</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 框架</span></span><br><span class="line">    g := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由</span></span><br><span class="line">    g.GET(<span class="string">"/t"</span>, test)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端口</span></span><br><span class="line">    g.Run(<span class="string">":4000"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">"Hallo!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:4000/t" target="_blank" rel="noopener">http://127.0.0.1:4000/t</a> ，页面输出Hallo!。</p><h3 id="4-路由"><a href="#4-路由" class="headerlink" title="4.路由"></a>4.路由</h3><p>Gin支持的路由方式和大部分主流框架基本一致。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := gin.Default()</span><br><span class="line"></span><br><span class="line">    g.GET(<span class="string">"/someGet"</span>, getting)</span><br><span class="line">    g.POST(<span class="string">"/somePost"</span>, posting)</span><br><span class="line">    g.PUT(<span class="string">"/somePut"</span>, putting)</span><br><span class="line">    g.DELETE(<span class="string">"/someDelete"</span>, deleting)</span><br><span class="line">    g.PATCH(<span class="string">"/somePatch"</span>, patching)</span><br><span class="line">    g.HEAD(<span class="string">"/someHead"</span>, head)</span><br><span class="line">    g.OPTIONS(<span class="string">"/someOptions"</span>, options)</span><br><span class="line"></span><br><span class="line">    g.Run(<span class="string">":4000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Gin同样也支持路由参数，不过不支持路由正则表达式。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此 handler 只能匹配 /user/&#123;PARAM&#125;</span></span><br><span class="line">    g.GET(<span class="string">"/user/:name"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">        c.String(http.StatusOK, <span class="string">"Hello %s"</span>, name)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此 handler 会匹配 /user/&#123;PARAM&#125;/ 和 /user/&#123;PARAM&#125;/&#123;ACTION_2&#125;</span></span><br><span class="line">    <span class="comment">// 如果访问 /user/&#123;PARAM&#125;，在没有 "/user/:name" 路由的情况下，会重定向至 /user/&#123;PARAM&#125;/ 匹配当前路由。</span></span><br><span class="line">    g.GET(<span class="string">"/user/:name/*action"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">        action := c.Param(<span class="string">"action"</span>)</span><br><span class="line">        message := name + <span class="string">" is "</span> + action</span><br><span class="line">        c.String(http.StatusOK, message)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    g.Run(<span class="string">":4000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-路由组"><a href="#5-路由组" class="headerlink" title="5.路由组"></a>5.路由组</h3><p>Gin在路由分组上的做法和其他框架也都是一致的，再次体现了Gin简单易用极容易上手的优点。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := gin.Default()</span><br><span class="line"></span><br><span class="line">    userGroup := g.Group(<span class="string">"/user"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        userGroup.POST(<span class="string">"/login"</span>, ctrls.Login)</span><br><span class="line">        userGroup.POST(<span class="string">"/logout"</span>, ctrls.Logout)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reportGroup := g.Group(<span class="string">"/report"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        reportGroup.POST(<span class="string">"/revenue"</span>, ctrls.RevenueReport)</span><br><span class="line">        reportGroup.POST(<span class="string">"/cost"</span>, ctrls.CostReport)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.Run(<span class="string">":4000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-中间件"><a href="#6-中间件" class="headerlink" title="6.中间件"></a>6.中间件</h3><p>Gin的中间件分为：全局，路由组，路由级别。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局中间件</span></span><br><span class="line">    g.Use(middleware)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由组中间件</span></span><br><span class="line">    routerGroup := g.Group(<span class="string">"/user"</span>, middleware)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 路由中间件</span></span><br><span class="line">        routerGroup.GET(<span class="string">"/login"</span>, middleware, ctrls.Login)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.Run(<span class="string">":4000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-参数"><a href="#7-参数" class="headerlink" title="7.参数"></a>7.参数</h3><p>Gin如何获取请求参数？下面的简单例子：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// URL参数</span></span><br><span class="line">    <span class="comment">// URL：/user?email=mark@im.com</span></span><br><span class="line">    g.GET(<span class="string">"/user"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 使用 DefaultQuery 或者 Query</span></span><br><span class="line">        email := c.DefaultQuery(<span class="string">"email"</span>, <span class="string">"default value"</span>)</span><br><span class="line">        email = c.Query(<span class="string">"email"</span>)</span><br><span class="line"></span><br><span class="line">        c.String(http.StatusOK, <span class="string">"Hallo, %s"</span>, email)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// POST参数</span></span><br><span class="line">    g.POST(<span class="string">"/user/login"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 使用 DefaultPostForm 或者 PostForm</span></span><br><span class="line">        email := c.PostForm(<span class="string">"email"</span>)</span><br><span class="line">        email = c.DefaultPostForm(<span class="string">"email"</span>, <span class="string">"default value"</span>)</span><br><span class="line"></span><br><span class="line">        c.String(http.StatusOK, <span class="string">"Hallo, %s"</span>, email)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    g.Run(<span class="string">":4000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Gin支持的操作还有很多，比如：数据绑定、数据验证、上传文件、静态资源嵌入等。 </p><p>Gin没有提供的组件也有很多，比如：ORM、Console、日志滚动分割等。 </p><p>仁者见仁智者见智，Gin专注做HTTP WEB框架的核心，更多扩展需要开发人员自己去选择，组件化的设计无疑是好的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/gin-gonic/gin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gin&lt;/a&gt; 是一个用 Go (Golang) 编写的 HTTP web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。&lt;/p&gt;
&lt;h3 id=&quot;1-有哪些优点&quot;&gt;&lt;a href=&quot;#1-有哪些优点&quot; class=&quot;headerlink&quot; title=&quot;1.有哪些优点&quot;&gt;&lt;/a&gt;1.有哪些优点&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;较高的性能（&lt;a href=&quot;https://github.com/julienschmidt/go-http-routing-benchmark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Golang WEB框架比对数据&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;简单易用的中间件&lt;/p&gt;
&lt;p&gt;使用了性能高可扩展的HTTP路由&lt;a href=&quot;https://github.com/julienschmidt/httprouter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;httprouter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;社区长期有着很高的活跃度&lt;/p&gt;
&lt;p&gt;Github星星多（Orz）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…等&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="golang" scheme="http://xupin.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>分屏工具 - Tmux</title>
    <link href="http://xupin.im/2019/12/24/tmux/"/>
    <id>http://xupin.im/2019/12/24/tmux/</id>
    <published>2019-12-23T16:00:00.000Z</published>
    <updated>2021-11-18T07:29:47.847Z</updated>
    
    <content type="html"><![CDATA[<p>Tmux是一个终端多路复用器：它使从单个屏幕创建，访问和控制多个终端成为可能。Tmux可能会与屏幕分离，并继续在后台运行，然后再重新连接。</p><h3 id="1-Tmux的结构"><a href="#1-Tmux的结构" class="headerlink" title="1.Tmux的结构"></a>1.Tmux的结构</h3><ul><li>Session<ul><li>Window<ul><li>Panel</li></ul></li></ul></li></ul><p>即，Tmux允许访问多个会话，每个会话可以拥有多个窗口，每个窗口还可以进行划分窗格。</p><h3 id="2-安装运行Tmux"><a href="#2-安装运行Tmux" class="headerlink" title="2.安装运行Tmux"></a>2.安装运行Tmux</h3><p>安装<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">$ yum <span class="keyword">install </span>tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">$ apt <span class="keyword">install </span>tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>tmux</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>tmux</span><br></pre></td></tr></table></figure></p><p>效果图，如下：</p><a id="more"></a><p><img src="/assets/tmux/started.png" alt><br>底面状态栏的左侧是会话窗口相关信息，右侧是系统相关信息。</p><p>退出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">exit</span> <span class="regexp">//</span> 或者Ctrl + D</span><br></pre></td></tr></table></figure><h3 id="3-Tmux怎么分屏呢？"><a href="#3-Tmux怎么分屏呢？" class="headerlink" title="3.Tmux怎么分屏呢？"></a>3.Tmux怎么分屏呢？</h3><p>首先，在Tmux中所有的快捷键都是以Ctrl + B开头的（默认是这样）。</p><p>横向划分窗格：Ctrl + B %<br>竖向划分窗格：Ctrl + B “（英文）</p><p>窗格分好了，怎么切换窗格呢？</p><p>Ctrl + B Up/Down/Left/Right（键盘方向键）亦或自定义键。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">vim</span> ~/.tmux.conf</span><br><span class="line"><span class="keyword">bind </span>h <span class="keyword">select-pane </span>-L</span><br><span class="line"><span class="keyword">bind </span>j <span class="keyword">select-pane </span>-D</span><br><span class="line"><span class="keyword">bind </span>k <span class="keyword">select-pane </span>-U</span><br><span class="line"><span class="keyword">bind </span>l <span class="keyword">select-pane </span>-R</span><br></pre></td></tr></table></figure></p><p>示例图，如下：<br><img src="/assets/tmux/example.png" alt></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本小白文仅仅简单教会入门使用Tmux，Tmux支持的操作远远不止这么简单。 </p><p>比如快捷键：</p><blockquote><p>新建窗口：Ctrl + B c</p><p>切换下一个窗口：Ctrl + B n</p><p>切换上一个窗口：Ctrl + B p</p></blockquote><p>比如命令：</p><blockquote><p>新建会话：tmux new -s</p><p>会话列表：tmux ls / tmux list-session</p></blockquote><p>关于Tmux更多内容可以去官方文档了解一下</p><blockquote><p><a href="https://github.com/tmux/tmux#documentation" target="_blank" rel="noopener">https://github.com/tmux/tmux#documentation</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tmux是一个终端多路复用器：它使从单个屏幕创建，访问和控制多个终端成为可能。Tmux可能会与屏幕分离，并继续在后台运行，然后再重新连接。&lt;/p&gt;
&lt;h3 id=&quot;1-Tmux的结构&quot;&gt;&lt;a href=&quot;#1-Tmux的结构&quot; class=&quot;headerlink&quot; title=&quot;1.Tmux的结构&quot;&gt;&lt;/a&gt;1.Tmux的结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Session&lt;ul&gt;
&lt;li&gt;Window&lt;ul&gt;
&lt;li&gt;Panel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即，Tmux允许访问多个会话，每个会话可以拥有多个窗口，每个窗口还可以进行划分窗格。&lt;/p&gt;
&lt;h3 id=&quot;2-安装运行Tmux&quot;&gt;&lt;a href=&quot;#2-安装运行Tmux&quot; class=&quot;headerlink&quot; title=&quot;2.安装运行Tmux&quot;&gt;&lt;/a&gt;2.安装运行Tmux&lt;/h3&gt;&lt;p&gt;安装&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# centos&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum &lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;tmux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ubuntu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ apt &lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;tmux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;tmux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;tmux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;效果图，如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="tmux" scheme="http://xupin.im/tags/tmux/"/>
    
    <category term="tools" scheme="http://xupin.im/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>ES学习笔记 - 实现列分组统计</title>
    <link href="http://xupin.im/2019/12/17/elasticsearch-group/"/>
    <id>http://xupin.im/2019/12/17/elasticsearch-group/</id>
    <published>2019-12-16T16:00:00.000Z</published>
    <updated>2021-11-18T07:25:34.355Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。</p><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>因为业务调整采用了ES作为数据库，所以需要了解ES对于这一块的设计如何实现类似Mysql中Group By的查询的效果。</p><h3 id="2-实现方式"><a href="#2-实现方式" class="headerlink" title="2.实现方式"></a>2.实现方式</h3><p>ES实现Group By有两种方式：TermsAgg、CompositeAgg，它们也具有不同程度的优缺点。</p><p>TermsAgg的使用方式非常粗暴，直接进行桶嵌套即可，如下:</p><details><br>  <summary>TermsAgg请求DSL语句</summary><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"aggregations"</span>: &#123;</span><br><span class="line"><span class="attr">"group_app"</span>: &#123;</span><br><span class="line"><span class="attr">"terms"</span>: &#123;</span><br><span class="line"><span class="attr">"field"</span>: <span class="string">"app"</span>,</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">1000000</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"aggregations"</span>: &#123;</span><br><span class="line"><span class="attr">"group_campaign_id"</span>: &#123;</span><br><span class="line"><span class="attr">"terms"</span>: &#123;</span><br><span class="line"><span class="attr">"field"</span>: <span class="string">"campaign_id"</span>,</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">1000000</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><br><details><br>  <summary>TermsAgg执行结果</summary><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">142</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">175033</span>,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">0.0</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">        <span class="attr">"group_app"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"key"</span>: <span class="string">"com.aa.bb.cc"</span>,</span><br><span class="line">                    <span class="attr">"doc_count"</span>: <span class="number">59929</span>,</span><br><span class="line">                    <span class="attr">"group_campaign_id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"buckets"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"key"</span>: <span class="string">"Campaign_118"</span>,</span><br><span class="line">                                <span class="attr">"doc_count"</span>: <span class="number">56466</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"key"</span>: <span class="string">"Campaign_119"</span>,</span><br><span class="line">                                <span class="attr">"doc_count"</span>: <span class="number">1937</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"key"</span>: <span class="string">"com.dd.ee.ff"</span>,</span><br><span class="line">                    <span class="attr">"doc_count"</span>: <span class="number">23231</span>,</span><br><span class="line">                    <span class="attr">"group_campaign_id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"buckets"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"key"</span>: <span class="string">"Campaign_120"</span>,</span><br><span class="line">                                <span class="attr">"doc_count"</span>: <span class="number">16692</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"key"</span>: <span class="string">"Campaign_121"</span>,</span><br><span class="line">                                <span class="attr">"doc_count"</span>: <span class="number">5336</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><p>CompositeAgg的使用方式略微有一些不同，下面：</p><details><br>  <summary>CompositeAgg请求DSL语句</summary><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"aggregations"</span>: &#123;</span><br><span class="line"><span class="attr">"group_by"</span>: &#123;</span><br><span class="line"><span class="attr">"composite"</span>: &#123;</span><br><span class="line"><span class="attr">"sources"</span>: [</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"app"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"app"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"campaign_id"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"campaign_id"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">                <span class="attr">"size"</span>: <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"size"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><br><details><br>  <summary>CompositeAgg执行结果</summary><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">175033</span>,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">0.0</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">        <span class="attr">"group_by"</span>: &#123;</span><br><span class="line">            <span class="attr">"after_key"</span>: &#123;</span><br><span class="line">                <span class="attr">"app"</span>: <span class="string">"com.dd.ee.ff"</span>,</span><br><span class="line">                <span class="attr">"campaign_id"</span>: <span class="string">"Campaign_120"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"key"</span>: &#123;</span><br><span class="line">                        <span class="attr">"app"</span>: <span class="string">"com.aa.bb.cc"</span>,</span><br><span class="line">                        <span class="attr">"campaign_id"</span>: <span class="string">"Campaign_119"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"doc_count"</span>: <span class="number">182</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"key"</span>: &#123;</span><br><span class="line">                        <span class="attr">"app"</span>: <span class="string">"com.dd.ee.ff"</span>,</span><br><span class="line">                        <span class="attr">"campaign_id"</span>: <span class="string">"Campaign_120"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"doc_count"</span>: <span class="number">40</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><h3 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3.优缺点"></a>3.优缺点</h3><p>TermsAgg</p><blockquote><p>优点：使用简单、没有数据量限制。</p><p>缺点：数据结构层次深、不支持分页。</p></blockquote><p>CompositeAgg</p><blockquote><p>优点：使用简单、数据结构清晰可读，支持分页。</p><p>缺点：有数据量限制。</p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>至于ES这两种分组方式的<code>性能方面还没有研究，后续学习笔记会更新性能上面的差异。</code></p><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html</a> // 附上ES官方文档</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。&lt;/p&gt;
&lt;h3 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h3&gt;&lt;p&gt;因为业务调整采用了ES作为</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="elasticsearch" scheme="http://xupin.im/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Nginx - 正向/反向代理</title>
    <link href="http://xupin.im/2019/12/17/nginx-proxy/"/>
    <id>http://xupin.im/2019/12/17/nginx-proxy/</id>
    <published>2019-12-16T16:00:00.000Z</published>
    <updated>2021-11-18T07:19:43.163Z</updated>
    
    <content type="html"><![CDATA[<p>代理通常用于在几台服务器之间分配负载，无缝显示来自不同网站的内容或通过除HTTP之外的协议将处理请求传递给应用服务器。</p><h3 id="1-代理的常用场景及优点"><a href="#1-代理的常用场景及优点" class="headerlink" title="1.代理的常用场景及优点"></a>1.代理的常用场景及优点</h3><p>正向代理</p><blockquote><p>gfw科学上网。</p><p>客户端访问鉴权。</p></blockquote><p>反向代理</p><blockquote><p>负载均衡。</p><p>保证内网的安全，阻止web攻击。</p></blockquote><h3 id="2-正向代理和反向代理有什么不同"><a href="#2-正向代理和反向代理有什么不同" class="headerlink" title="2.正向代理和反向代理有什么不同"></a>2.正向代理和反向代理有什么不同</h3><p>比较通俗的来解释：正向代理代理的是客户端，服务端不知道实际发起请求的客户端、反向代理代理的是服务端，客户端不知道实际接收请求的服务端。</p><p>一张图表示（来源：<a href="https://zhuanlan.zhihu.com/p/82300486" target="_blank" rel="noopener">知乎wplulala</a>）<br><img src="/assets/nginx-proxy/relation.jpg" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;代理通常用于在几台服务器之间分配负载，无缝显示来自不同网站的内容或通过除HTTP之外的协议将处理请求传递给应用服务器。&lt;/p&gt;
&lt;h3 id=&quot;1-代理的常用场景及优点&quot;&gt;&lt;a href=&quot;#1-代理的常用场景及优点&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="nginx" scheme="http://xupin.im/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 索引</title>
    <link href="http://xupin.im/2019/12/16/mysql-index/"/>
    <id>http://xupin.im/2019/12/16/mysql-index/</id>
    <published>2019-12-16T11:30:00.000Z</published>
    <updated>2021-11-11T08:56:41.609Z</updated>
    
    <content type="html"><![CDATA[<p>索引用于快速查找具有特定列值的行。没有索引，MySQL必须从第一行开始，然后通读整个表以找到相关的行。如果表中有相关​​列的索引，MySQL可以快速确定要在数据文件中间查找的位置，而不必查看所有数据。这比顺序读取每一行要快得多。<br>InnoDB和MyIsam只支持Btree，因此默认均是Btree，Memory和Heap支持Hash和Btree，如无明确声明，则默认索引均是Hash（包括主键）。</p><h3 id="1-Mysql有哪些常用的索引"><a href="#1-Mysql有哪些常用的索引" class="headerlink" title="1.Mysql有哪些常用的索引"></a>1.Mysql有哪些常用的索引</h3><blockquote><p>主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键。</p><p>唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。</p><p>普通索引：基本的索引类型，没有唯一性的限制，允许为null。</p><p>全文索引：全文索引是目前实现大数据搜索的关键技术。</p></blockquote><h3 id="2-Mysql索引的建立原则"><a href="#2-Mysql索引的建立原则" class="headerlink" title="2.Mysql索引的建立原则"></a>2.Mysql索引的建立原则</h3><p>Mysql的索引遵循最左原则，在创建多列索引时，要根据业务需求，where条件中使用最频繁的一列放在最左边。</p><a id="more"></a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">index</span><span class="params">(a,b,c)</span></span></span><br><span class="line">where <span class="selector-tag">a</span> = v <span class="comment">// 使用a</span></span><br><span class="line">where <span class="selector-tag">a</span> = v and <span class="selector-tag">b</span> = v <span class="comment">// 使用a,b</span></span><br><span class="line">where <span class="selector-tag">a</span> = v and <span class="selector-tag">b</span> = v and c = v <span class="comment">// 使用a,b,c</span></span><br><span class="line"></span><br><span class="line">where <span class="selector-tag">b</span> = v <span class="comment">// 未使用索引</span></span><br><span class="line">where <span class="selector-tag">a</span> = v and c = v <span class="comment">// 使用a</span></span><br><span class="line">where <span class="selector-tag">b</span> = v and c = v <span class="comment">// 未使用索引</span></span><br><span class="line"></span><br><span class="line">where <span class="selector-tag">a</span> &gt; v <span class="comment">// 是否使用索引，取决于查询结果集，如果全表扫描速度比索引速度快，那么不使用索引。</span></span><br><span class="line"></span><br><span class="line">where <span class="selector-tag">a</span> like <span class="string">"v%"</span> <span class="comment">// 使用a</span></span><br><span class="line">where <span class="selector-tag">a</span> like <span class="string">"%v%"</span> <span class="comment">// 不适用索引</span></span><br></pre></td></tr></table></figure><h3 id="3-如何分析SQL语句执行性能"><a href="#3-如何分析SQL语句执行性能" class="headerlink" title="3.如何分析SQL语句执行性能"></a>3.如何分析SQL语句执行性能</h3><p>以下是两种分析SQL性能的常用方式，explain、show profiles/show profile。</p><blockquote><p>explain + SQL语句，获取SQL分析数据</p><ul><li>select_type：对应SQL语句的查询复杂度。</li><li>table：正在访问的表。</li><li>partitions：数据所在的分区。</li><li>type：表示是否用上索引，以及索引是如何使用的，此字段决定索引的性能。<code>ALL&lt;TYPE&lt;RANGE&lt;REF&lt;CONST</code></li><li>possible_keys：查询条件存在的索引。</li><li>key：触发的索引。</li><li>key_len：索引字段的长度。</li><li>ref：索引访问，返回所有匹配某个单值的行。</li><li>rows：执行查询必须检查的行数，在InnoDB中此值不精确。</li><li>filtered：条件过滤出的行数的百分比。</li><li>extra：查询分析结果的额外信息，很重要 e.g. Using index、Using where …</li></ul><p>show profiles获得当前会话中执行的SQL语句，字段为：Query_ID, Duration, Query，show profile all for query {Query_ID}</p></blockquote><h3 id="4-Mysql中索引建立常见问题"><a href="#4-Mysql中索引建立常见问题" class="headerlink" title="4.Mysql中索引建立常见问题"></a>4.Mysql中索引建立常见问题</h3><ol><li>为经常需要排序、分组和联合操作的字段建立索引</li><li>为常作为查询条件的字段建立索引</li><li>索引列值保证唯一性</li><li>索引建立的数量不要过多</li><li>索引列不要使用函数或者表达式</li><li>行锁依赖索引的建立</li><li>普通索引的数据重复率过高会导致索引失效</li><li><code>最左原则</code></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;索引用于快速查找具有特定列值的行。没有索引，MySQL必须从第一行开始，然后通读整个表以找到相关的行。如果表中有相关​​列的索引，MySQL可以快速确定要在数据文件中间查找的位置，而不必查看所有数据。这比顺序读取每一行要快得多。&lt;br&gt;InnoDB和MyIsam只支持Btree，因此默认均是Btree，Memory和Heap支持Hash和Btree，如无明确声明，则默认索引均是Hash（包括主键）。&lt;/p&gt;
&lt;h3 id=&quot;1-Mysql有哪些常用的索引&quot;&gt;&lt;a href=&quot;#1-Mysql有哪些常用的索引&quot; class=&quot;headerlink&quot; title=&quot;1.Mysql有哪些常用的索引&quot;&gt;&lt;/a&gt;1.Mysql有哪些常用的索引&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键。&lt;/p&gt;
&lt;p&gt;唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。&lt;/p&gt;
&lt;p&gt;普通索引：基本的索引类型，没有唯一性的限制，允许为null。&lt;/p&gt;
&lt;p&gt;全文索引：全文索引是目前实现大数据搜索的关键技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-Mysql索引的建立原则&quot;&gt;&lt;a href=&quot;#2-Mysql索引的建立原则&quot; class=&quot;headerlink&quot; title=&quot;2.Mysql索引的建立原则&quot;&gt;&lt;/a&gt;2.Mysql索引的建立原则&lt;/h3&gt;&lt;p&gt;Mysql的索引遵循最左原则，在创建多列索引时，要根据业务需求，where条件中使用最频繁的一列放在最左边。&lt;/p&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 事务隔离级别</title>
    <link href="http://xupin.im/2019/12/05/mysql-transaction/"/>
    <id>http://xupin.im/2019/12/05/mysql-transaction/</id>
    <published>2019-12-05T04:30:00.000Z</published>
    <updated>2021-11-11T08:56:41.610Z</updated>
    
    <content type="html"><![CDATA[<p>什么是事务？事务（Transaction）一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)，具有4个特性：原子性、一致性、隔离性、持久性，简称ACID。</p><p>那么Mysql的事务隔离级别又是什么呢？Mysql的事务隔离级别分别是4种：未提交读（Read Uncommitted）、已提交读（Read Committed）、Repeatable Read（可重复读）、Serializable（可串行化）。可以简单理解为Mysql事务的4种执行标准。</p><h3 id="一、ACID特性"><a href="#一、ACID特性" class="headerlink" title="一、ACID特性"></a>一、ACID特性</h3><blockquote><p>原子性（Atomicity）：一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</p></blockquote><p><br></p><blockquote><p>一致性（Consistency）：事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</p></blockquote><p><br></p><blockquote><p>隔离性（Isolation）：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></blockquote><p><br></p><blockquote><p>持久性（Durability）：指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p></blockquote><h3 id="二、Mysql事务隔离级别"><a href="#二、Mysql事务隔离级别" class="headerlink" title="二、Mysql事务隔离级别"></a>二、Mysql事务隔离级别</h3><blockquote><p>未提交读（Read Uncommitted），指当前事务可以读取到其他事务还未提交的数据变化，最容易带来的问题是脏读（Dirty Read），很少应用到生产环境。</p></blockquote><p><br></p><blockquote><p>已提交读（Read Committed），大部分数据库默认隔离级别但不包括Mysql，指当前事务可以读取其他事务已提交的数据变化，具有隔离性的基本标准，但是在出现交叉事务的并发操作场景中会发生两次读取的数据结果集不一致的问题，即不可重复读（Nonrepeatable Read）。</p></blockquote><p><br></p><blockquote><p>Repeatable Read（可重复读），Mysql数据库的默认隔离级别，这里顺便解释一下为什么Mysql的隔离级别不是Read Committed，因为在Mysql5.0之前日志格式只有statement这一种，这种格式导致主从复制一致性很难得到保证。这种隔离级别可以解决Nonrepeatable Read的问题，但如果也出现在交叉事务的并发操作场景会出现幻读（Phantom Read）的现象，这一行为状态是当前事务不能及时有效的读取其他事务的数据变化。</p></blockquote><p><br></p><blockquote><p>Serializable（可串行化），Mysql事务隔离最高级别，望文生义大概意思是事务的执行是有序（串行化顺序）的，不存在事务交叉执行的场景从而解决了Phantom Read的问题，但是在高并发的业务场景下请求会出现阻塞、超时、锁竟抢的问题，系统的可用性也随之降低。</p></blockquote><h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3><blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html</a> // Mysql事务官方文档</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是事务？事务（Transaction）一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)，具有4个特性：原子性、一致性、隔离性、持久性，简称ACID。&lt;/p&gt;
&lt;p&gt;那么Mysql的事务隔离级别又是什么呢？Mys</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记 - 悲观锁/乐观锁</title>
    <link href="http://xupin.im/2019/12/04/pessimistic-optimistic/"/>
    <id>http://xupin.im/2019/12/04/pessimistic-optimistic/</id>
    <published>2019-12-04T11:30:00.000Z</published>
    <updated>2021-11-18T07:26:59.350Z</updated>
    
    <content type="html"><![CDATA[<p>什么是锁？在多进程（线程）编程中为了数据的一致性、有效性，如果一资源被某进程（线程）上锁，那么在释放锁之前其他进程（线程）无法进行操作或者等待获取（上）锁。</p><h3 id="一、悲观锁"><a href="#一、悲观锁" class="headerlink" title="一、悲观锁"></a>一、悲观锁</h3><p>悲观锁（Pessimistic locking），顾名思义对待任何事务都持悲观态度，做任何事情都会认为会有竞抢行为~所以在进行任何操作之前都要做好万全准备（上锁）才会继续执行后续的操作。通常是利用系统提供的锁机制来实现。<br>比如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mysql中的上锁命令：for <span class="keyword">update</span>、<span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>等</span><br><span class="line">Redis中的一些操作命令：setnx、getset等（原子操作）</span><br></pre></td></tr></table></figure></p><h3 id="二、乐观锁"><a href="#二、乐观锁" class="headerlink" title="二、乐观锁"></a>二、乐观锁</h3><p>乐观锁（Optimistic locking），和悲观锁相反对待任何事务都持乐观态度，只会在最后即将执行操作的时刻前才会进行验证。通常是通过程序配合来实现。<br>比如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="string">`orders`</span> <span class="keyword">set</span> <span class="keyword">hash</span> = <span class="keyword">md5</span>(<span class="keyword">now</span>()) <span class="keyword">where</span> uid = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">hash</span> = &#123;lastHash&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h3><p>悲观锁优点很鲜明，因为每次执行的操作都是独占的，数据的一致性、有效性、安全性较高。但缺点同样突出，每次操作都会产生上锁的开销，在并发请求比较密集的情况下容易阻塞或者驳回请求，甚至是造成死锁，也大大降低了系统的性能。</p><p>乐观锁优点是省去了锁的开销，能较高的提高系统吞吐量，缺点是如果出现在并发高且竟抢（冲突）行为比较多的场景下数据的一致性很难保证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是锁？在多进程（线程）编程中为了数据的一致性、有效性，如果一资源被某进程（线程）上锁，那么在释放锁之前其他进程（线程）无法进行操作或者等待获取（上）锁。&lt;/p&gt;
&lt;h3 id=&quot;一、悲观锁&quot;&gt;&lt;a href=&quot;#一、悲观锁&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="mysql" scheme="http://xupin.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记 - 持久化方式</title>
    <link href="http://xupin.im/2019/12/03/redis-aof-rdb/"/>
    <id>http://xupin.im/2019/12/03/redis-aof-rdb/</id>
    <published>2019-12-03T07:30:00.000Z</published>
    <updated>2021-11-11T08:56:41.611Z</updated>
    
    <content type="html"><![CDATA[<p>Redis是一个开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。</p><h3 id="一、Redis数据存储的方式有两种"><a href="#一、Redis数据存储的方式有两种" class="headerlink" title="一、Redis数据存储的方式有两种"></a>一、Redis数据存储的方式有两种</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单纯的缓存模式, 整个数据的生命周期随着Redis <span class="built_in">Server</span>的停止而消失。</span><br><span class="line">persistence模式, 数据会持续备份到磁盘文件。</span><br></pre></td></tr></table></figure><h3 id="二、Redis如何实现持久化存储？Redis提供了两种方式。"><a href="#二、Redis如何实现持久化存储？Redis提供了两种方式。" class="headerlink" title="二、Redis如何实现持久化存储？Redis提供了两种方式。"></a>二、Redis如何实现持久化存储？Redis提供了两种方式。</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">RDB</span><span class="params">(Redis DataBase)</span></span></span><br><span class="line"><span class="function"><span class="title">AOF</span><span class="params">(Append-only file)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="三、RDB"><a href="#三、RDB" class="headerlink" title="三、RDB"></a>三、RDB</h3><p>RDB的工作原理有点像运维脚本自动化定时备份数据一样，当内存中的数据到达配置的阈值就会执行DUMP操作备份数据到临时文件,备份成功结束后重命名为dump.rdb文件。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">优点：<span class="keyword">fork</span>子进程来进行备份,父进程不会进行io操作。恢复数据时的速度很快。</span><br><span class="line">缺点：这种方式是每隔一次才会进行备份,假如下一次备份前down机会丢失部分数据。而且如果备份的数据比较大，<span class="keyword">fork</span>的子进程将会比较耗时，这段时间内会导致父进程阻塞。</span><br><span class="line">补充：因为这种每隔一段时间去备份一次的方式，类似快照。所以又叫 Snapshot。</span><br></pre></td></tr></table></figure></p><h3 id="四、AOF"><a href="#四、AOF" class="headerlink" title="四、AOF"></a>四、AOF</h3><p>AOF的工作原理是讲写操作（数据）格式化追加到日志尾部，该日志文件保存了所有的历史操作数据，这一点非常类似Mysql中的bin.log。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：AOF这种方式可以保证较高的数据完整性，可以设置不同的策略，比如不保存，每一秒钟保存一次，或者每执行一个命令保存一次。AOF的默认策略为每一秒钟保存一次, 就算出现down机最多也就丢失<span class="number">1</span>秒钟的数据, AOF备份数据因为是在后台线程执行fork子进程, 所以不会阻塞主线程。</span><br><span class="line">缺点：对于同样规模的数据备份的文件体积AOF要大于RDB。在备份速度上面也会慢于RDB，恢复速度同样也没有RDB快。</span><br></pre></td></tr></table></figure></p><h3 id="五、AOF备份触发机制"><a href="#五、AOF备份触发机制" class="headerlink" title="五、AOF备份触发机制"></a>五、AOF备份触发机制</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Redis服务端接收到客户端bgrewriteaof指令请求，如果当前没有在进行备份那么立即进行备份，否则等待备份完毕之后再执行备份。</span><br><span class="line"><span class="number">2.</span> Redis conf配置了<span class="keyword">auto</span>-aof-rewrite-percentage和<span class="keyword">auto</span>-aof-rewrite-<span class="built_in">min</span>-<span class="built_in">size</span>参数，并且当前AOF文件大小server.aof_current_size大于<span class="keyword">auto</span>-aof-rewrite-<span class="built_in">min</span>-<span class="built_in">size</span>，且AOF文件大小的增长率大于<span class="keyword">auto</span>-aof-rewrite-percentage时触发备份。</span><br><span class="line"><span class="number">3.</span> 使用<span class="built_in">config</span> <span class="built_in">set</span> appendonly yes命令时，调用startAppendOnly()函数触发备份。</span><br></pre></td></tr></table></figure><h3 id="六、那究竟使用哪种方式？"><a href="#六、那究竟使用哪种方式？" class="headerlink" title="六、那究竟使用哪种方式？"></a>六、那究竟使用哪种方式？</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RDB 会有丢失数据风险，备份文件体积小，数据备份/恢复速度快。</span><br><span class="line">AOF 数据完整性更加安全，但是频繁备份需要过多的<span class="built_in">io</span>操作性能会受到影响，备份文件体积较大，数据恢复速度慢。</span><br></pre></td></tr></table></figure><p>首先，我们明白AOF, RDB的优缺点之后可以概括出: AOF适合热备，RDB适合冷备，Redis4.0以后允许使用aof-use-rdb-preamble配置项打开RDB-AOF混合持久化。</p><h3 id="七、RDB-AOF混合使用的之后备份文件的变化"><a href="#七、RDB-AOF混合使用的之后备份文件的变化" class="headerlink" title="七、RDB/AOF混合使用的之后备份文件的变化"></a>七、RDB/AOF混合使用的之后备份文件的变化</h3><p>当RDB和AOF同时开启之后<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Redis默认会优先加载AOF的配置文件。</span><br><span class="line"><span class="bullet">2. </span>AOF备份文件的内容格式发生改变，备份文件前半段是RDB格式的全量数据后半段是Redis命令格式的增量数据。</span><br></pre></td></tr></table></figure></p><h3 id="八、AOF文件内容格式"><a href="#八、AOF文件内容格式" class="headerlink" title="八、AOF文件内容格式"></a>八、AOF文件内容格式</h3><p>AOF文件内容格式是Redis通讯协议RESP（REdis Serialization Protocol）格式的命令文本存储，在此不展开学习后续会专门学习Redis的RESP协议。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>附上Redis对于持久化方式说明的文档</p><blockquote><p><a href="https://redis.io/topics/persistence" target="_blank" rel="noopener">https://redis.io/topics/persistence</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis是一个开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。&lt;/p&gt;
&lt;h3 id=&quot;一、Redis数据存储的方式有两种&quot;&gt;&lt;a href=&quot;#一、Redis数据存储的方式有两种&quot; class=&quot;headerlink&quot; title=&quot;一、Redis数据存储的方式有两种&quot;&gt;&lt;/a&gt;一、Redis数据存储的方式有两种&lt;/h3&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;单纯的缓存模式, 整个数据的生命周期随着Redis &lt;span class=&quot;built_in&quot;&gt;Server&lt;/span&gt;的停止而消失。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;persistence模式, 数据会持续备份到磁盘文件。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;二、Redis如何实现持久化存储？Redis提供了两种方式。&quot;&gt;&lt;a href=&quot;#二、Redis如何实现持久化存储？Redis提供了两种方式。&quot; class=&quot;headerlink&quot; title=&quot;二、Redis如何实现持久化存储？Redis提供了两种方式。&quot;&gt;&lt;/a&gt;二、Redis如何实现持久化存储？Redis提供了两种方式。&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;RDB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Redis DataBase)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;AOF&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Append-only file)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="redis" scheme="http://xupin.im/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>设备通知推送 - Google FCM</title>
    <link href="http://xupin.im/2017/02/28/google-msg-push/"/>
    <id>http://xupin.im/2017/02/28/google-msg-push/</id>
    <published>2017-02-27T16:00:00.000Z</published>
    <updated>2021-11-18T07:20:24.239Z</updated>
    
    <content type="html"><![CDATA[<p>Firebase 是一个移动平台，可以帮助您快速开发高品质应用，扩大用户群，并赚取更多收益。Firebase 由多种互补功能组成，您可以自行组合和匹配这些功能以满足自己的需求。</p><h3 id="1-获取Google推送的KEY-Google应用后台"><a href="#1-获取Google推送的KEY-Google应用后台" class="headerlink" title="1.获取Google推送的KEY(Google应用后台)"></a>1.获取Google推送的KEY(Google应用后台)</h3><blockquote><p>AIzaSyCm5Vufc1FAtWE1kupGhVDRb0ThkCoWC7d // 这个是我的</p></blockquote><h3 id="2-PHP推送代码"><a href="#2-PHP推送代码" class="headerlink" title="2.PHP推送代码"></a>2.PHP推送代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化环境</span></span><br><span class="line">$url = <span class="string">'https://fcm.googleapis.com/fcm/send'</span>;</span><br><span class="line">$ch = curl_init($url);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$header = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'Content-Type: application/json'</span>,</span><br><span class="line"><span class="string">'Authorization: key=AIzaSyCm5Vufc1FAtWE1kupGhVDRb0ThkCoWC7d'</span> <span class="comment">// 这里是刚才的KEY</span></span><br><span class="line">);</span><br><span class="line">curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建消息体,json编码</span></span><br><span class="line">$content = json_encode([</span><br><span class="line"><span class="string">'notification'</span>=&gt;[</span><br><span class="line"><span class="string">'title'</span> =&gt; <span class="string">'这里是标题'</span>, </span><br><span class="line"><span class="string">'body'</span> =&gt; <span class="string">'这里是内容'</span>, </span><br><span class="line"><span class="string">'icon'</span> =&gt; <span class="string">'这里是后台设置的iconName'</span></span><br><span class="line">],</span><br><span class="line"><span class="string">'to'</span>=&gt;<span class="string">'设备标识(Google SDK可以获取)'</span>,</span><br><span class="line"><span class="string">'registration_ids'</span>=&gt;[<span class="string">'设备标识'</span>,<span class="string">'设备标识'</span>] <span class="comment">// 如果要推送多台设备,可以使用此字段,最多支持1000台设备</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $content);</span><br><span class="line"></span><br><span class="line">$ret = json_decode(curl_exec($ch), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">$ret[<span class="string">'success'</span>]; <span class="comment">// 推送成功数</span></span><br><span class="line"></span><br><span class="line">$ret[<span class="string">'failure'</span>]; <span class="comment">// 推送失败数</span></span><br></pre></td></tr></table></figure><h3 id="3-返回值示例"><a href="#3-返回值示例" class="headerlink" title="3.返回值示例"></a>3.返回值示例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multicast_id"</span>: <span class="number">7669649331143639654</span>,</span><br><span class="line">    <span class="attr">"success"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"failure"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"canonical_ids"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"results"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"message_id"</span>: <span class="string">"0:1488360060090224%6490a2d16490a2d1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"message_id"</span>: <span class="string">"0:1488360060095871%6490a2d16490a2d1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"message_id"</span>: <span class="string">"0:1488360060090765%6490a2d16490a2d1"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Google-FCM-文档"><a href="#4-Google-FCM-文档" class="headerlink" title="4.Google(FCM) 文档"></a>4.Google(FCM) 文档</h3><blockquote><p><a href="https://firebase.google.com/docs" target="_blank" rel="noopener">https://firebase.google.com/docs</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Firebase 是一个移动平台，可以帮助您快速开发高品质应用，扩大用户群，并赚取更多收益。Firebase 由多种互补功能组成，您可以自行组合和匹配这些功能以满足自己的需求。&lt;/p&gt;
&lt;h3 id=&quot;1-获取Google推送的KEY-Google应用后台&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
    <category term="google fcm" scheme="http://xupin.im/tags/google-fcm/"/>
    
  </entry>
  
  <entry>
    <title>设备通知推送 - Apple APNS</title>
    <link href="http://xupin.im/2017/02/22/apple-msg-push/"/>
    <id>http://xupin.im/2017/02/22/apple-msg-push/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2021-11-18T07:20:30.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-合成证书-需要两个文件-cer-p12-苹果开发者后台获取"><a href="#1-合成证书-需要两个文件-cer-p12-苹果开发者后台获取" class="headerlink" title="1.合成证书(需要两个文件.cer,.p12,苹果开发者后台获取)"></a>1.合成证书(需要两个文件<em>.cer,</em>.p12,苹果开发者后台获取)</h3><blockquote><p>ios.cer,ios.p12 // 我这里的文件名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -<span class="keyword">in</span> ios.cer -inform der -out ios_cer.pem</span><br><span class="line">$ openssl pkcs12 -nocerts -out ios_p12.pem -<span class="keyword">in</span> ios.p12</span><br><span class="line">Enter Import Password: // 这里输入Apple后台文件导出时的密码</span><br><span class="line">MAC verified OK</span><br><span class="line">Enter PEM pass phrase: // 这里输入新的pem密码(用于代码中),我输入的是123456789</span><br><span class="line">$ cat ios_cer.pem ios_p12.pem &gt; key.pem</span><br></pre></td></tr></table></figure><h3 id="2-PHP推送代码"><a href="#2-PHP推送代码" class="headerlink" title="2.PHP推送代码"></a>2.PHP推送代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化环境</span></span><br><span class="line">$ctx = stream_context_create();</span><br><span class="line"></span><br><span class="line">stream_context_set_option($ctx, <span class="string">'ssl'</span>, <span class="string">'local_cert'</span>, <span class="string">'assets/key/key.pem'</span>); <span class="comment">// key文件的路径</span></span><br><span class="line">stream_context_set_option($ctx, <span class="string">'ssl'</span>, <span class="string">'passphrase'</span>, <span class="string">'123456789'</span>); <span class="comment">// 生成pem输入的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立APNS连接</span></span><br><span class="line">$fp = stream_socket_client( <span class="string">'ssl://gateway.push.apple.com:2195'</span>, $err, $errstr, <span class="number">60</span>, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建消息体,json编码</span></span><br><span class="line">$payload = json_encode( <span class="keyword">array</span>( <span class="string">'aps'</span>=&gt;<span class="keyword">array</span>(<span class="string">'alert'</span> =&gt; <span class="string">'这里是内容'</span>, <span class="string">'sound'</span> =&gt; <span class="string">'这里是提示声音'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换二进制</span></span><br><span class="line">$msg = chr(<span class="number">0</span>) . pack(<span class="string">'n'</span>, <span class="number">32</span>) . pack(<span class="string">'H*'</span>, <span class="string">'设备标识(Apple SDK可以获取)'</span>) . pack(<span class="string">'n'</span>, strlen($payload)) . $payload;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">$result = fwrite($fp, $msg, strlen($msg));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$result)&#123;</span><br><span class="line"><span class="comment">// 推送失败</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 推送成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br></pre></td></tr></table></figure><h3 id="3-APNS文档"><a href="#3-APNS文档" class="headerlink" title="3.APNS文档"></a>3.APNS文档</h3><blockquote><p><a href="https://developer.apple.com/notifications/" target="_blank" rel="noopener">https://developer.apple.com/notifications/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-合成证书-需要两个文件-cer-p12-苹果开发者后台获取&quot;&gt;&lt;a href=&quot;#1-合成证书-需要两个文件-cer-p12-苹果开发者后台获取&quot; class=&quot;headerlink&quot; title=&quot;1.合成证书(需要两个文件.cer,.p12,苹果开发者后台</summary>
      
    
    
    
    
    <category term="apns" scheme="http://xupin.im/tags/apns/"/>
    
    <category term="develop" scheme="http://xupin.im/tags/develop/"/>
    
  </entry>
  
  <entry>
    <title>游戏 - 源码学习</title>
    <link href="http://xupin.im/2000/01/01/game-source-code/"/>
    <id>http://xupin.im/2000/01/01/game-source-code/</id>
    <published>1999-12-31T16:00:00.000Z</published>
    <updated>2021-11-15T10:44:23.251Z</updated>
    
    <content type="html"><![CDATA[<p>长期分享和交换各种手游源码，欢迎来撩～</p><p><img src="https://img.wenhairu.com/images/2021/11/15/1zzIq.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;长期分享和交换各种手游源码，欢迎来撩～&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.wenhairu.com/images/2021/11/15/1zzIq.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="game" scheme="http://xupin.im/tags/game/"/>
    
  </entry>
  
</feed>
